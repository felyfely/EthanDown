mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_18;
  tmpvar_18[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_18[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_18[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = (normalize((tmpvar_17 * tmpvar_18)) * sqrt(dot (tmpvar_17, tmpvar_17)));
  FinalPosition_12 = tmpvar_19;
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_14 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_11.zxy) - (tmpvar_30.zxy * vRotatedWindVector_11.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_11, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_9 = vDirection_24;
    FinalPosition_12 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_12 + _glesMultiTexCoord1.xyz);
  FinalPosition_12 = tmpvar_63;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_10 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_12 = vPos_64;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_12;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_12 = vPos_88;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_95;
  highp vec3 viewN_96;
  highp vec3 viewpos_97;
  viewpos_97 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_98[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_98[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_96 = normalize((tmpvar_98 * tmpvar_9));
  lowp vec3 tmpvar_99;
  tmpvar_99 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_95 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (unity_LightPosition[0].xyz - (viewpos_97 * unity_LightPosition[0].w));
  highp float tmpvar_101;
  tmpvar_101 = dot (tmpvar_100, tmpvar_100);
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * inversesqrt(tmpvar_101));
  lightColor_95 = (lightColor_95 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_96, tmpvar_102))
   * 
    ((1.0/((1.0 + (tmpvar_101 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_102, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[1].xyz - (viewpos_97 * unity_LightPosition[1].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_95 = (lightColor_95 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_96, tmpvar_105))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_105, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[2].xyz - (viewpos_97 * unity_LightPosition[2].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_95 = (lightColor_95 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_96, tmpvar_108))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_108, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[3].xyz - (viewpos_97 * unity_LightPosition[3].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_95 = (lightColor_95 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_96, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_4.xyz * lightColor_95);
  tmpvar_3.xyz = tmpvar_112;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  _glesFragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_20;
  tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (normalize((tmpvar_19 * tmpvar_20)) * sqrt(dot (tmpvar_19, tmpvar_19)));
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_16 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_65;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_15;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_15 = vPos_90;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_97;
  highp vec3 viewN_98;
  highp vec3 viewpos_99;
  viewpos_99 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_100;
  tmpvar_100[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_100[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_100[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_98 = normalize((tmpvar_100 * tmpvar_12));
  lowp vec3 tmpvar_101;
  tmpvar_101 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_97 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (unity_LightPosition[0].xyz - (viewpos_99 * unity_LightPosition[0].w));
  highp float tmpvar_103;
  tmpvar_103 = dot (tmpvar_102, tmpvar_102);
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_102 * inversesqrt(tmpvar_103));
  lightColor_97 = (lightColor_97 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_98, tmpvar_104))
   * 
    ((1.0/((1.0 + (tmpvar_103 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_104, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[1].xyz - (viewpos_99 * unity_LightPosition[1].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_97 = (lightColor_97 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_98, tmpvar_107))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_107, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[2].xyz - (viewpos_99 * unity_LightPosition[2].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_97 = (lightColor_97 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_98, tmpvar_110))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_110, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[3].xyz - (viewpos_99 * unity_LightPosition[3].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_97 = (lightColor_97 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_98, tmpvar_113))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_113, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_4.xyz * lightColor_97);
  tmpvar_3.xyz = tmpvar_114;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_20;
  tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (normalize((tmpvar_19 * tmpvar_20)) * sqrt(dot (tmpvar_19, tmpvar_19)));
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_16 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_65;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_15;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_15 = vPos_90;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_97;
  highp vec3 viewN_98;
  highp vec3 viewpos_99;
  viewpos_99 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_100;
  tmpvar_100[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_100[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_100[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_98 = normalize((tmpvar_100 * tmpvar_12));
  lowp vec3 tmpvar_101;
  tmpvar_101 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_97 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (unity_LightPosition[0].xyz - (viewpos_99 * unity_LightPosition[0].w));
  highp float tmpvar_103;
  tmpvar_103 = dot (tmpvar_102, tmpvar_102);
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_102 * inversesqrt(tmpvar_103));
  lightColor_97 = (lightColor_97 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_98, tmpvar_104))
   * 
    ((1.0/((1.0 + (tmpvar_103 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_104, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[1].xyz - (viewpos_99 * unity_LightPosition[1].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_97 = (lightColor_97 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_98, tmpvar_107))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_107, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[2].xyz - (viewpos_99 * unity_LightPosition[2].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_97 = (lightColor_97 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_98, tmpvar_110))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_110, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[3].xyz - (viewpos_99 * unity_LightPosition[3].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_97 = (lightColor_97 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_98, tmpvar_113))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_113, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_4.xyz * lightColor_97);
  tmpvar_3.xyz = tmpvar_114;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_5;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_8;
  highp vec3 vRotatedWindVector_9;
  highp vec3 FinalPosition_10;
  FinalPosition_10 = tmpvar_1.xyz;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_9 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_8 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_9 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_8 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_10 = tmpvar_15;
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_16;
    vPos_16 = tmpvar_15;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_17;
      vPos_17 = tmpvar_15;
      highp float fAdherenceScale_18;
      highp vec3 tmpvar_19;
      tmpvar_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_20;
      tmpvar_20 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_21;
      highp float fOscillation_22;
      fOscillation_22 = 1.0;
      highp float fAmount_23;
      highp float fTarget_24;
      highp vec4 tmpvar_25;
      tmpvar_25.x = (tmpvar_20 + _glesMultiTexCoord0.w);
      tmpvar_25.y = ((tmpvar_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_25.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_20 + _glesMultiTexCoord0.w));
      tmpvar_25.w = ((tmpvar_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_25 + 0.5))
       * 2.0) - 1.0));
      vOscillations_21 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      highp float tmpvar_27;
      tmpvar_27 = (vOscillations_21.y * vOscillations_21.z);
      fTarget_24 = 1.0;
      fAmount_23 = tmpvar_27;
      if ((tmpvar_27 < 0.0)) {
        fTarget_24 = -1.0;
        fAmount_23 = -(tmpvar_27);
      };
      fOscillation_22 = (((
        (mix (mix (tmpvar_27, fTarget_24, fAmount_23), fTarget_24, fAmount_23) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_21.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_21.w * _ST_WindBranchWhip.x)));
      vPos_17 = (tmpvar_15 + ((tmpvar_19 * fOscillation_22) * _ST_WindBranch.y));
      highp vec4 tmpvar_28;
      tmpvar_28.zw = vec2(0.0, 0.0);
      tmpvar_28.x = ((tmpvar_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_28.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_29;
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      tmpvar_29 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((
        ((tmpvar_29.x * tmpvar_29.y) * tmpvar_29.x)
       * tmpvar_29.y) * _ST_WindTurbulences.x));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_21.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_17 = (vPos_17 + ((
        ((vRotatedBranchAnchor_8 - vPos_17) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_16 = vPos_17;
    } else {
      highp vec3 vPos_31;
      vPos_31 = vPos_16;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_34;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      vPos_31 = (vPos_16 + ((tmpvar_32 * 
        (((mix (
          mix (tmpvar_39, fTarget_36, fAmount_35)
        , fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_34.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_16 = vPos_31;
    };
    FinalPosition_10 = vPos_16;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_10;
    highp float fAdjust_41;
    highp float fLength_42;
    fLength_42 = sqrt(dot (FinalPosition_10, FinalPosition_10));
    highp float tmpvar_43;
    tmpvar_43 = (max ((FinalPosition_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_41 = tmpvar_43;
    if ((tmpvar_43 != 0.0)) {
      fAdjust_41 = pow (tmpvar_43, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_44;
    tmpvar_44.zw = vec2(0.0, 0.0);
    tmpvar_44.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_44.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_45;
    highp vec4 tmpvar_46;
    tmpvar_46 = abs(((
      fract((tmpvar_44 + 0.5))
     * 2.0) - 1.0));
    tmpvar_45 = (((
      (tmpvar_46 * tmpvar_46)
     * 
      (3.0 - (2.0 * tmpvar_46))
    ) - 0.5) * 2.0);
    vPos_40.xz = (FinalPosition_10.xz + (vRotatedWindVector_9.xz * (
      ((_ST_WindGlobal.y * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_41)));
    vPos_40 = (normalize(vPos_40) * fLength_42);
    FinalPosition_10 = vPos_40;
  };
  tmpvar_7.xyz = FinalPosition_10;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_47;
  highp vec3 viewN_48;
  highp vec3 viewpos_49;
  viewpos_49 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_50[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_50[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_48 = normalize((tmpvar_50 * _glesNormal));
  lowp vec3 tmpvar_51;
  tmpvar_51 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_47 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (unity_LightPosition[0].xyz - (viewpos_49 * unity_LightPosition[0].w));
  highp float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_52);
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * inversesqrt(tmpvar_53));
  lightColor_47 = (lightColor_47 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_48, tmpvar_54))
   * 
    ((1.0/((1.0 + (tmpvar_53 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_54, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_55;
  tmpvar_55 = (unity_LightPosition[1].xyz - (viewpos_49 * unity_LightPosition[1].w));
  highp float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_55);
  highp vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * inversesqrt(tmpvar_56));
  lightColor_47 = (lightColor_47 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_48, tmpvar_57))
   * 
    ((1.0/((1.0 + (tmpvar_56 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_57, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[2].xyz - (viewpos_49 * unity_LightPosition[2].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_47 = (lightColor_47 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_48, tmpvar_60))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_60, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[3].xyz - (viewpos_49 * unity_LightPosition[3].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_47 = (lightColor_47 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_48, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_3.xyz * lightColor_47);
  tmpvar_2.xyz = tmpvar_64;
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_5;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_8;
  highp vec3 vRotatedWindVector_9;
  highp vec3 FinalPosition_10;
  FinalPosition_10 = tmpvar_1.xyz;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_9 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_8 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_9 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_8 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_10 = tmpvar_15;
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_16;
    vPos_16 = tmpvar_15;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_17;
      vPos_17 = tmpvar_15;
      highp float fAdherenceScale_18;
      highp vec3 tmpvar_19;
      tmpvar_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_20;
      tmpvar_20 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_21;
      highp float fOscillation_22;
      fOscillation_22 = 1.0;
      highp float fAmount_23;
      highp float fTarget_24;
      highp vec4 tmpvar_25;
      tmpvar_25.x = (tmpvar_20 + _glesMultiTexCoord0.w);
      tmpvar_25.y = ((tmpvar_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_25.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_20 + _glesMultiTexCoord0.w));
      tmpvar_25.w = ((tmpvar_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_25 + 0.5))
       * 2.0) - 1.0));
      vOscillations_21 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      highp float tmpvar_27;
      tmpvar_27 = (vOscillations_21.y * vOscillations_21.z);
      fTarget_24 = 1.0;
      fAmount_23 = tmpvar_27;
      if ((tmpvar_27 < 0.0)) {
        fTarget_24 = -1.0;
        fAmount_23 = -(tmpvar_27);
      };
      fOscillation_22 = (((
        (mix (mix (tmpvar_27, fTarget_24, fAmount_23), fTarget_24, fAmount_23) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_21.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_21.w * _ST_WindBranchWhip.x)));
      vPos_17 = (tmpvar_15 + ((tmpvar_19 * fOscillation_22) * _ST_WindBranch.y));
      highp vec4 tmpvar_28;
      tmpvar_28.zw = vec2(0.0, 0.0);
      tmpvar_28.x = ((tmpvar_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_28.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_29;
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      tmpvar_29 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((
        ((tmpvar_29.x * tmpvar_29.y) * tmpvar_29.x)
       * tmpvar_29.y) * _ST_WindTurbulences.x));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_21.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_17 = (vPos_17 + ((
        ((vRotatedBranchAnchor_8 - vPos_17) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_16 = vPos_17;
    } else {
      highp vec3 vPos_31;
      vPos_31 = vPos_16;
      highp vec3 tmpvar_32;
      tmpvar_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_33;
      tmpvar_33 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_34;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (tmpvar_33 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((tmpvar_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_34 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_34.y * vOscillations_34.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      vPos_31 = (vPos_16 + ((tmpvar_32 * 
        (((mix (
          mix (tmpvar_39, fTarget_36, fAmount_35)
        , fTarget_36, fAmount_35) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_34.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_16 = vPos_31;
    };
    FinalPosition_10 = vPos_16;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_10;
    highp float fAdjust_41;
    highp float fLength_42;
    fLength_42 = sqrt(dot (FinalPosition_10, FinalPosition_10));
    highp float tmpvar_43;
    tmpvar_43 = (max ((FinalPosition_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_41 = tmpvar_43;
    if ((tmpvar_43 != 0.0)) {
      fAdjust_41 = pow (tmpvar_43, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_44;
    tmpvar_44.zw = vec2(0.0, 0.0);
    tmpvar_44.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_44.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_45;
    highp vec4 tmpvar_46;
    tmpvar_46 = abs(((
      fract((tmpvar_44 + 0.5))
     * 2.0) - 1.0));
    tmpvar_45 = (((
      (tmpvar_46 * tmpvar_46)
     * 
      (3.0 - (2.0 * tmpvar_46))
    ) - 0.5) * 2.0);
    vPos_40.xz = (FinalPosition_10.xz + (vRotatedWindVector_9.xz * (
      ((_ST_WindGlobal.y * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_41)));
    vPos_40 = (normalize(vPos_40) * fLength_42);
    FinalPosition_10 = vPos_40;
  };
  tmpvar_7.xyz = FinalPosition_10;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_47;
  highp vec3 viewN_48;
  highp vec3 viewpos_49;
  viewpos_49 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_50[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_50[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_48 = normalize((tmpvar_50 * _glesNormal));
  lowp vec3 tmpvar_51;
  tmpvar_51 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_47 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (unity_LightPosition[0].xyz - (viewpos_49 * unity_LightPosition[0].w));
  highp float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_52);
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * inversesqrt(tmpvar_53));
  lightColor_47 = (lightColor_47 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_48, tmpvar_54))
   * 
    ((1.0/((1.0 + (tmpvar_53 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_54, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_55;
  tmpvar_55 = (unity_LightPosition[1].xyz - (viewpos_49 * unity_LightPosition[1].w));
  highp float tmpvar_56;
  tmpvar_56 = dot (tmpvar_55, tmpvar_55);
  highp vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_55 * inversesqrt(tmpvar_56));
  lightColor_47 = (lightColor_47 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_48, tmpvar_57))
   * 
    ((1.0/((1.0 + (tmpvar_56 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_57, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[2].xyz - (viewpos_49 * unity_LightPosition[2].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_47 = (lightColor_47 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_48, tmpvar_60))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_60, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[3].xyz - (viewpos_49 * unity_LightPosition[3].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_47 = (lightColor_47 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_48, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_3.xyz * lightColor_47);
  tmpvar_2.xyz = tmpvar_64;
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  _glesFragData[0] = tmpvar_7;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_5;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_6;
  highp float cse_7;
  cse_7 = _Object2World[3].x;
  highp float cse_8;
  cse_8 = _Object2World[3].y;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((cse_7 + cse_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (cse_7 + cse_8));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_11 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (cse_7 + cse_8));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_13 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_13;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (cse_7 + _ST_WindGlobal.x);
    tmpvar_46.y = (cse_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_13 = vPos_42;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_6 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_5;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_6;
  highp float cse_7;
  cse_7 = _Object2World[3].x;
  highp float cse_8;
  cse_8 = _Object2World[3].y;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((
    fract(((cse_7 + cse_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (cse_7 + cse_8));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_11 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (cse_7 + cse_8));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_13 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_13;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (cse_7 + _ST_WindGlobal.x);
    tmpvar_46.y = (cse_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_13 = vPos_42;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_6 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  _glesFragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_15;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_48.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_15 = vPos_44;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_51;
  highp vec3 viewN_52;
  highp vec3 viewpos_53;
  viewpos_53 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_54[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_54[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_52 = normalize((tmpvar_54 * _glesNormal));
  lowp vec3 tmpvar_55;
  tmpvar_55 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_51 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_53 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_51 = (lightColor_51 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_52, tmpvar_58))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_58, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_53 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_51 = (lightColor_51 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_52, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_53 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_51 = (lightColor_51 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_52, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_53 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_51 = (lightColor_51 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_52, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_3.xyz * lightColor_51);
  tmpvar_2.xyz = tmpvar_68;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_9;
  tmpvar_9 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  gl_FragData[0] = tmpvar_10;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_15;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_48.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_15 = vPos_44;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_51;
  highp vec3 viewN_52;
  highp vec3 viewpos_53;
  viewpos_53 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_54[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_54[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_52 = normalize((tmpvar_54 * _glesNormal));
  lowp vec3 tmpvar_55;
  tmpvar_55 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_51 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_53 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_51 = (lightColor_51 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_52, tmpvar_58))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_58, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_53 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_51 = (lightColor_51 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_52, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_53 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_51 = (lightColor_51 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_52, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_53 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_51 = (lightColor_51 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_52, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_3.xyz * lightColor_51);
  tmpvar_2.xyz = tmpvar_68;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_9;
  tmpvar_9 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  _glesFragData[0] = tmpvar_10;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.xy = _glesMultiTexCoord2.zw;
  tmpvar_8.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.xy = _glesMultiTexCoord2.zw;
  tmpvar_8.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fAdherenceScale_20;
      highp vec3 tmpvar_21;
      tmpvar_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_22;
      tmpvar_22 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (tmpvar_22 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((tmpvar_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_22 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((tmpvar_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        (mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_23.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((tmpvar_21 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((tmpvar_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((
        ((tmpvar_31.x * tmpvar_31.y) * tmpvar_31.x)
       * tmpvar_31.y) * _ST_WindTurbulences.x));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp vec3 tmpvar_34;
      tmpvar_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_35;
      tmpvar_35 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (tmpvar_35 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((tmpvar_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      vPos_33 = (vPos_18 + ((tmpvar_34 * 
        (((mix (
          mix (tmpvar_41, fTarget_38, fAmount_37)
        , fTarget_38, fAmount_37) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fAdjust_43;
    highp float fLength_44;
    fLength_44 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_45;
    tmpvar_45 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_43 = tmpvar_45;
    if ((tmpvar_45 != 0.0)) {
      fAdjust_43 = pow (tmpvar_45, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_46;
    tmpvar_46.zw = vec2(0.0, 0.0);
    tmpvar_46.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_46.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_47;
    highp vec4 tmpvar_48;
    tmpvar_48 = abs(((
      fract((tmpvar_46 + 0.5))
     * 2.0) - 1.0));
    tmpvar_47 = (((
      (tmpvar_48 * tmpvar_48)
     * 
      (3.0 - (2.0 * tmpvar_48))
    ) - 0.5) * 2.0);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_43)));
    vPos_42 = (normalize(vPos_42) * fLength_44);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_49;
  highp vec3 viewN_50;
  highp vec3 viewpos_51;
  viewpos_51 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_52[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_52[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_50 = normalize((tmpvar_52 * _glesNormal));
  lowp vec3 tmpvar_53;
  tmpvar_53 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_49 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_51 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  highp vec3 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_49 = (lightColor_49 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_50, tmpvar_56))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_56, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_51 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  highp vec3 tmpvar_59;
  tmpvar_59 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_49 = (lightColor_49 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_50, tmpvar_59))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_59, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_51 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_49 = (lightColor_49 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_50, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_51 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_49 = (lightColor_49 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_50, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_3.xyz * lightColor_49);
  tmpvar_2.xyz = tmpvar_66;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_15;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_48.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_15 = vPos_44;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_51;
  highp vec3 viewN_52;
  highp vec3 viewpos_53;
  viewpos_53 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_54[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_54[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_52 = normalize((tmpvar_54 * _glesNormal));
  lowp vec3 tmpvar_55;
  tmpvar_55 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_51 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_53 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_51 = (lightColor_51 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_52, tmpvar_58))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_58, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_53 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_51 = (lightColor_51 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_52, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_53 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_51 = (lightColor_51 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_52, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_53 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_51 = (lightColor_51 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_52, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_3.xyz * lightColor_51);
  tmpvar_2.xyz = tmpvar_68;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_9;
  tmpvar_9 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  gl_FragData[0] = tmpvar_10;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fAdherenceScale_22;
      highp vec3 tmpvar_23;
      tmpvar_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_24;
      tmpvar_24 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (tmpvar_24 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((tmpvar_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_24 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((tmpvar_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        (mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_25.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((tmpvar_23 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((tmpvar_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((
        ((tmpvar_33.x * tmpvar_33.y) * tmpvar_33.x)
       * tmpvar_33.y) * _ST_WindTurbulences.x));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp vec3 tmpvar_36;
      tmpvar_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_37;
      tmpvar_37 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_38;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (tmpvar_37 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((tmpvar_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      vPos_35 = (vPos_20 + ((tmpvar_36 * 
        (((mix (
          mix (tmpvar_43, fTarget_40, fAmount_39)
        , fTarget_40, fAmount_39) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_15;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_48.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    vPos_44.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_45)));
    vPos_44 = (normalize(vPos_44) * fLength_46);
    FinalPosition_15 = vPos_44;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_51;
  highp vec3 viewN_52;
  highp vec3 viewpos_53;
  viewpos_53 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_54[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_54[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_52 = normalize((tmpvar_54 * _glesNormal));
  lowp vec3 tmpvar_55;
  tmpvar_55 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_51 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_53 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_51 = (lightColor_51 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_52, tmpvar_58))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_58, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_53 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_51 = (lightColor_51 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_52, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_53 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_51 = (lightColor_51 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_52, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_53 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_51 = (lightColor_51 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_52, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_3.xyz * lightColor_51);
  tmpvar_2.xyz = tmpvar_68;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_7;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_8 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_9;
  tmpvar_9 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  _glesFragData[0] = tmpvar_10;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (tmpvar_17 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_9 = tmpvar_2;
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = FinalPosition_12;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (FinalPosition_12 + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_10 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_12 = vPos_22;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_12;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_12 = vPos_46;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_53;
  highp vec3 viewN_54;
  highp vec3 viewpos_55;
  viewpos_55 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_56[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_56[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_54 = normalize((tmpvar_56 * tmpvar_9));
  lowp vec3 tmpvar_57;
  tmpvar_57 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_53 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[0].xyz - (viewpos_55 * unity_LightPosition[0].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_53 = (lightColor_53 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_54, tmpvar_60))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_60, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[1].xyz - (viewpos_55 * unity_LightPosition[1].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_53 = (lightColor_53 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_54, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[2].xyz - (viewpos_55 * unity_LightPosition[2].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_53 = (lightColor_53 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_54, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[3].xyz - (viewpos_55 * unity_LightPosition[3].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_53 = (lightColor_53 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_54, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_4.xyz * lightColor_53);
  tmpvar_3.xyz = tmpvar_70;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 == 5.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    highp float fOffset_19;
    fOffset_19 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_19 = 0.75;
    };
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_19);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (tmpvar_17 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_9 = tmpvar_2;
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = FinalPosition_12;
      highp float fAdherenceScale_24;
      highp vec3 tmpvar_25;
      tmpvar_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_26;
      tmpvar_26 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (tmpvar_26 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((tmpvar_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_26 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((tmpvar_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        (mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_27.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (FinalPosition_12 + ((tmpvar_25 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((tmpvar_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((
        ((tmpvar_35.x * tmpvar_35.y) * tmpvar_35.x)
       * tmpvar_35.y) * _ST_WindTurbulences.x));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_10 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp vec3 tmpvar_38;
      tmpvar_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_39;
      tmpvar_39 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_40;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (tmpvar_39 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((tmpvar_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      vPos_37 = (vPos_22 + ((tmpvar_38 * 
        (((mix (
          mix (tmpvar_45, fTarget_42, fAmount_41)
        , fTarget_42, fAmount_41) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_12 = vPos_22;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_12;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    vPos_46.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_47)));
    vPos_46 = (normalize(vPos_46) * fLength_48);
    FinalPosition_12 = vPos_46;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_53;
  highp vec3 viewN_54;
  highp vec3 viewpos_55;
  viewpos_55 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_56;
  tmpvar_56[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_56[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_56[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_54 = normalize((tmpvar_56 * tmpvar_9));
  lowp vec3 tmpvar_57;
  tmpvar_57 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_53 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[0].xyz - (viewpos_55 * unity_LightPosition[0].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_53 = (lightColor_53 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_54, tmpvar_60))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_60, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[1].xyz - (viewpos_55 * unity_LightPosition[1].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_53 = (lightColor_53 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_54, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[2].xyz - (viewpos_55 * unity_LightPosition[2].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_53 = (lightColor_53 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_54, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[3].xyz - (viewpos_55 * unity_LightPosition[3].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_53 = (lightColor_53 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_54, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_4.xyz * lightColor_53);
  tmpvar_3.xyz = tmpvar_70;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  _glesFragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_15;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_15 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_13 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_15 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_15;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_15 = vPos_48;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_55;
  highp vec3 viewN_56;
  highp vec3 viewpos_57;
  viewpos_57 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_58[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_58[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_56 = normalize((tmpvar_58 * tmpvar_12));
  lowp vec3 tmpvar_59;
  tmpvar_59 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_55 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_57 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_55 = (lightColor_55 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_56, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_57 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_55 = (lightColor_55 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_56, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_57 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_55 = (lightColor_55 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_56, tmpvar_68))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_68, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_57 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_55 = (lightColor_55 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_56, tmpvar_71))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_71, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_4.xyz * lightColor_55);
  tmpvar_3.xyz = tmpvar_72;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_15;
      highp float fAdherenceScale_26;
      highp vec3 tmpvar_27;
      tmpvar_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_28;
      tmpvar_28 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (tmpvar_28 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((tmpvar_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_28 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((tmpvar_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        (mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_29.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_15 + ((tmpvar_27 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((tmpvar_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((
        ((tmpvar_37.x * tmpvar_37.y) * tmpvar_37.x)
       * tmpvar_37.y) * _ST_WindTurbulences.x));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_13 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp vec3 tmpvar_40;
      tmpvar_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_41;
      tmpvar_41 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_42;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (tmpvar_41 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((tmpvar_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      vPos_39 = (vPos_24 + ((tmpvar_40 * 
        (((mix (
          mix (tmpvar_47, fTarget_44, fAmount_43)
        , fTarget_44, fAmount_43) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_15 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_15;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_52.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    vPos_48.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_53.x + (tmpvar_53.y * tmpvar_53.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_49)));
    vPos_48 = (normalize(vPos_48) * fLength_50);
    FinalPosition_15 = vPos_48;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_55;
  highp vec3 viewN_56;
  highp vec3 viewpos_57;
  viewpos_57 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_58[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_58[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_56 = normalize((tmpvar_58 * tmpvar_12));
  lowp vec3 tmpvar_59;
  tmpvar_59 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_55 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_57 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_55 = (lightColor_55 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_56, tmpvar_62))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_62, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_57 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_55 = (lightColor_55 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_56, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_57 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_55 = (lightColor_55 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_56, tmpvar_68))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_68, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_57 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_55 = (lightColor_55 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_56, tmpvar_71))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_71, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_4.xyz * lightColor_55);
  tmpvar_3.xyz = tmpvar_72;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord3.xy;
  lowp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19.x = tmpvar_3.w;
  tmpvar_19.y = tmpvar_4.x;
  tmpvar_19.z = tmpvar_4.y;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((_glesVertex.xyz - _glesMultiTexCoord1.xyz), tmpvar_19, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_20;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_16 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_13.zxy) - (tmpvar_31.zxy * vRotatedWindVector_13.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_11 = vDirection_25;
    FinalPosition_14 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_64;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_12 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_14 = vPos_65;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_14;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_14 = vPos_89;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5.w = tmpvar_6.w;
  highp vec3 lightColor_96;
  highp vec3 viewN_97;
  highp vec3 viewpos_98;
  viewpos_98 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_99;
  tmpvar_99[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_99[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_99[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_97 = normalize((tmpvar_99 * tmpvar_11));
  lowp vec3 tmpvar_100;
  tmpvar_100 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_96 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (unity_LightPosition[0].xyz - (viewpos_98 * unity_LightPosition[0].w));
  highp float tmpvar_102;
  tmpvar_102 = dot (tmpvar_101, tmpvar_101);
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * inversesqrt(tmpvar_102));
  lightColor_96 = (lightColor_96 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_97, tmpvar_103))
   * 
    ((1.0/((1.0 + (tmpvar_102 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_103, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_104;
  tmpvar_104 = (unity_LightPosition[1].xyz - (viewpos_98 * unity_LightPosition[1].w));
  highp float tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_104);
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_104 * inversesqrt(tmpvar_105));
  lightColor_96 = (lightColor_96 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_97, tmpvar_106))
   * 
    ((1.0/((1.0 + (tmpvar_105 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_106, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[2].xyz - (viewpos_98 * unity_LightPosition[2].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_96 = (lightColor_96 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_97, tmpvar_109))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_109, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[3].xyz - (viewpos_98 * unity_LightPosition[3].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_96 = (lightColor_96 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_97, tmpvar_112))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_112, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_6.xyz * lightColor_96);
  tmpvar_5.xyz = tmpvar_113;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_5;
  xlv_Input_interpolator1 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord3.xy;
  lowp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19.x = tmpvar_3.w;
  tmpvar_19.y = tmpvar_4.x;
  tmpvar_19.z = tmpvar_4.y;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((_glesVertex.xyz - _glesMultiTexCoord1.xyz), tmpvar_19, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_20;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_16 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_13.zxy) - (tmpvar_31.zxy * vRotatedWindVector_13.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_11 = vDirection_25;
    FinalPosition_14 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  FinalPosition_14 = tmpvar_64;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_12 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_14 = vPos_65;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_14;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_14 = vPos_89;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5.w = tmpvar_6.w;
  highp vec3 lightColor_96;
  highp vec3 viewN_97;
  highp vec3 viewpos_98;
  viewpos_98 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_99;
  tmpvar_99[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_99[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_99[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_97 = normalize((tmpvar_99 * tmpvar_11));
  lowp vec3 tmpvar_100;
  tmpvar_100 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_96 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (unity_LightPosition[0].xyz - (viewpos_98 * unity_LightPosition[0].w));
  highp float tmpvar_102;
  tmpvar_102 = dot (tmpvar_101, tmpvar_101);
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_101 * inversesqrt(tmpvar_102));
  lightColor_96 = (lightColor_96 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_97, tmpvar_103))
   * 
    ((1.0/((1.0 + (tmpvar_102 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_103, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_104;
  tmpvar_104 = (unity_LightPosition[1].xyz - (viewpos_98 * unity_LightPosition[1].w));
  highp float tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_104);
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_104 * inversesqrt(tmpvar_105));
  lightColor_96 = (lightColor_96 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_97, tmpvar_106))
   * 
    ((1.0/((1.0 + (tmpvar_105 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_106, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[2].xyz - (viewpos_98 * unity_LightPosition[2].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_96 = (lightColor_96 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_97, tmpvar_109))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_109, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[3].xyz - (viewpos_98 * unity_LightPosition[3].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_96 = (lightColor_96 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_97, tmpvar_112))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_112, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_6.xyz * lightColor_96);
  tmpvar_5.xyz = tmpvar_113;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_5;
  xlv_Input_interpolator1 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  _glesFragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord3.xy;
  lowp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_3.w;
  tmpvar_21.y = tmpvar_4.x;
  tmpvar_21.z = tmpvar_4.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix ((_glesVertex.xyz - _glesMultiTexCoord1.xyz), tmpvar_21, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_16.zxy) - (tmpvar_33.zxy * vRotatedWindVector_16.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_14 = vDirection_27;
    FinalPosition_17 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_66;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_15 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_17 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_17;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_17 = vPos_91;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5.w = tmpvar_6.w;
  highp vec3 lightColor_98;
  highp vec3 viewN_99;
  highp vec3 viewpos_100;
  viewpos_100 = (glstate_matrix_modelview0 * tmpvar_13).xyz;
  highp mat3 tmpvar_101;
  tmpvar_101[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_101[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_101[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_99 = normalize((tmpvar_101 * tmpvar_14));
  lowp vec3 tmpvar_102;
  tmpvar_102 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_98 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[0].xyz - (viewpos_100 * unity_LightPosition[0].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_98 = (lightColor_98 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_99, tmpvar_105))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_105, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[1].xyz - (viewpos_100 * unity_LightPosition[1].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_98 = (lightColor_98 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_99, tmpvar_108))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_108, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[2].xyz - (viewpos_100 * unity_LightPosition[2].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_98 = (lightColor_98 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_99, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (unity_LightPosition[3].xyz - (viewpos_100 * unity_LightPosition[3].w));
  highp float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_112);
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_112 * inversesqrt(tmpvar_113));
  lightColor_98 = (lightColor_98 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_99, tmpvar_114))
   * 
    ((1.0/((1.0 + (tmpvar_113 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_114, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_6.xyz * lightColor_98);
  tmpvar_5.xyz = tmpvar_115;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_Input_color = tmpvar_5;
  xlv_Input_interpolator1 = tmpvar_7;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
in vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord3.xy;
  lowp vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  highp float cse_10;
  cse_10 = _Object2World[3].x;
  highp float cse_11;
  cse_11 = _Object2World[3].y;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((
    fract(((cse_10 + cse_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_3.w;
  tmpvar_21.y = tmpvar_4.x;
  tmpvar_21.z = tmpvar_4.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix ((_glesVertex.xyz - _glesMultiTexCoord1.xyz), tmpvar_21, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_16.zxy) - (tmpvar_33.zxy * vRotatedWindVector_16.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_14 = vDirection_27;
    FinalPosition_17 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  FinalPosition_17 = tmpvar_66;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_15 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_10 + cse_11));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_17 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_17;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_10 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_17 = vPos_91;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5.w = tmpvar_6.w;
  highp vec3 lightColor_98;
  highp vec3 viewN_99;
  highp vec3 viewpos_100;
  viewpos_100 = (glstate_matrix_modelview0 * tmpvar_13).xyz;
  highp mat3 tmpvar_101;
  tmpvar_101[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_101[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_101[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_99 = normalize((tmpvar_101 * tmpvar_14));
  lowp vec3 tmpvar_102;
  tmpvar_102 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_98 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[0].xyz - (viewpos_100 * unity_LightPosition[0].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_98 = (lightColor_98 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_99, tmpvar_105))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_105, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[1].xyz - (viewpos_100 * unity_LightPosition[1].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_98 = (lightColor_98 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_99, tmpvar_108))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_108, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[2].xyz - (viewpos_100 * unity_LightPosition[2].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_98 = (lightColor_98 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_99, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (unity_LightPosition[3].xyz - (viewpos_100 * unity_LightPosition[3].w));
  highp float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_112);
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_112 * inversesqrt(tmpvar_113));
  lightColor_98 = (lightColor_98 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_99, tmpvar_114))
   * 
    ((1.0/((1.0 + (tmpvar_113 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_114, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_6.xyz * lightColor_98);
  tmpvar_5.xyz = tmpvar_115;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_Input_color = tmpvar_5;
  xlv_Input_interpolator1 = tmpvar_7;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_18;
  tmpvar_18[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_18[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_18[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = (normalize((tmpvar_17 * tmpvar_18)) * sqrt(dot (tmpvar_17, tmpvar_17)));
  FinalPosition_12 = tmpvar_19;
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_14 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_11.zxy) - (tmpvar_30.zxy * vRotatedWindVector_11.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_11, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_9 = vDirection_24;
    FinalPosition_12 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_12 + _glesMultiTexCoord1.xyz);
  FinalPosition_12 = tmpvar_63;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_10 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_12 = vPos_64;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_12;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_12 = vPos_88;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_95;
  highp vec3 viewN_96;
  highp vec3 viewpos_97;
  viewpos_97 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_98[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_98[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_96 = normalize((tmpvar_98 * tmpvar_9));
  lowp vec3 tmpvar_99;
  tmpvar_99 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_95 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (unity_LightPosition[0].xyz - (viewpos_97 * unity_LightPosition[0].w));
  highp float tmpvar_101;
  tmpvar_101 = dot (tmpvar_100, tmpvar_100);
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * inversesqrt(tmpvar_101));
  lightColor_95 = (lightColor_95 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_96, tmpvar_102))
   * 
    ((1.0/((1.0 + (tmpvar_101 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_102, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[1].xyz - (viewpos_97 * unity_LightPosition[1].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_95 = (lightColor_95 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_96, tmpvar_105))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_105, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[2].xyz - (viewpos_97 * unity_LightPosition[2].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_95 = (lightColor_95 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_96, tmpvar_108))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_108, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[3].xyz - (viewpos_97 * unity_LightPosition[3].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_95 = (lightColor_95 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_96, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_4.xyz * lightColor_95);
  tmpvar_3.xyz = tmpvar_112;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_8 = tmpvar_1;
  tmpvar_9 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_18;
  tmpvar_18[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_18[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_18[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = (normalize((tmpvar_17 * tmpvar_18)) * sqrt(dot (tmpvar_17, tmpvar_17)));
  FinalPosition_12 = tmpvar_19;
  if (((tmpvar_14 > 1.0) && (tmpvar_14 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_14 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_31 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_31 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_31 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_31 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_46.x * tmpvar_30.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_46.x * tmpvar_30.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_46.x * tmpvar_30.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_30.yzx * vRotatedWindVector_11.zxy) - (tmpvar_30.zxy * vRotatedWindVector_11.yzx));
      vAxis_38.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_11, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_38);
      vAxis_38 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_53;
      tmpvar_53 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_54;
        fTime_54 = (tmpvar_35.z + tmpvar_40);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_34)
       + 
        (tmpvar_53 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_59.x * tmpvar_51.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_59.x * tmpvar_51.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_59.x * tmpvar_51.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_48 * tmpvar_61);
      vDirection_24 = (tmpvar_62 * _glesNormal);
      vPos_23 = (normalize((tmpvar_62 * vPos_27)) * tmpvar_44);
    };
    tmpvar_9 = vDirection_24;
    FinalPosition_12 = vPos_23;
  };
  highp vec3 tmpvar_63;
  tmpvar_63 = (FinalPosition_12 + _glesMultiTexCoord1.xyz);
  FinalPosition_12 = tmpvar_63;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = tmpvar_63;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = tmpvar_63;
      highp float fAdherenceScale_66;
      highp vec3 tmpvar_67;
      tmpvar_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_68;
      tmpvar_68 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (tmpvar_68 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((tmpvar_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_68 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((tmpvar_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        (mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_69.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (tmpvar_63 + ((tmpvar_67 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((tmpvar_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((
        ((tmpvar_77.x * tmpvar_77.y) * tmpvar_77.x)
       * tmpvar_77.y) * _ST_WindTurbulences.x));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_10 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp vec3 tmpvar_80;
      tmpvar_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_81;
      tmpvar_81 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_82;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (tmpvar_81 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((tmpvar_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      vPos_79 = (vPos_64 + ((tmpvar_80 * 
        (((mix (
          mix (tmpvar_87, fTarget_84, fAmount_83)
        , fTarget_84, fAmount_83) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_12 = vPos_64;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_12;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    vPos_88.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * (
      ((_ST_WindGlobal.y * (tmpvar_93.x + (tmpvar_93.y * tmpvar_93.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_89)));
    vPos_88 = (normalize(vPos_88) * fLength_90);
    FinalPosition_12 = vPos_88;
  };
  tmpvar_8.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_95;
  highp vec3 viewN_96;
  highp vec3 viewpos_97;
  viewpos_97 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_98[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_98[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_96 = normalize((tmpvar_98 * tmpvar_9));
  lowp vec3 tmpvar_99;
  tmpvar_99 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_95 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (unity_LightPosition[0].xyz - (viewpos_97 * unity_LightPosition[0].w));
  highp float tmpvar_101;
  tmpvar_101 = dot (tmpvar_100, tmpvar_100);
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_100 * inversesqrt(tmpvar_101));
  lightColor_95 = (lightColor_95 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_96, tmpvar_102))
   * 
    ((1.0/((1.0 + (tmpvar_101 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_102, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[1].xyz - (viewpos_97 * unity_LightPosition[1].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_95 = (lightColor_95 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_96, tmpvar_105))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_105, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[2].xyz - (viewpos_97 * unity_LightPosition[2].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_95 = (lightColor_95 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_96, tmpvar_108))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_108, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[3].xyz - (viewpos_97 * unity_LightPosition[3].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_95 = (lightColor_95 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_96, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_4.xyz * lightColor_95);
  tmpvar_3.xyz = tmpvar_112;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  _glesFragData[0] = tmpvar_8;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_20;
  tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (normalize((tmpvar_19 * tmpvar_20)) * sqrt(dot (tmpvar_19, tmpvar_19)));
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_16 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_65;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_15;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_15 = vPos_90;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_97;
  highp vec3 viewN_98;
  highp vec3 viewpos_99;
  viewpos_99 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_100;
  tmpvar_100[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_100[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_100[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_98 = normalize((tmpvar_100 * tmpvar_12));
  lowp vec3 tmpvar_101;
  tmpvar_101 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_97 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (unity_LightPosition[0].xyz - (viewpos_99 * unity_LightPosition[0].w));
  highp float tmpvar_103;
  tmpvar_103 = dot (tmpvar_102, tmpvar_102);
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_102 * inversesqrt(tmpvar_103));
  lightColor_97 = (lightColor_97 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_98, tmpvar_104))
   * 
    ((1.0/((1.0 + (tmpvar_103 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_104, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[1].xyz - (viewpos_99 * unity_LightPosition[1].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_97 = (lightColor_97 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_98, tmpvar_107))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_107, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[2].xyz - (viewpos_99 * unity_LightPosition[2].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_97 = (lightColor_97 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_98, tmpvar_110))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_110, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[3].xyz - (viewpos_99 * unity_LightPosition[3].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_97 = (lightColor_97 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_98, tmpvar_113))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_113, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_4.xyz * lightColor_97);
  tmpvar_3.xyz = tmpvar_114;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = ((_glesVertex.xyz - _glesMultiTexCoord1.xyz) * mix (1.0, _glesMultiTexCoord1.w, unity_LODFade.x));
  highp mat3 tmpvar_20;
  tmpvar_20[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_20[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_20[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = (normalize((tmpvar_19 * tmpvar_20)) * sqrt(dot (tmpvar_19, tmpvar_19)));
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_16 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_33 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_33 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_33 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_33 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_48.x * tmpvar_32.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_48.x * tmpvar_32.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_48.x * tmpvar_32.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_40);
      vAxis_40 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_55;
      tmpvar_55 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_56;
        fTime_56 = (tmpvar_37.z + tmpvar_42);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_36)
       + 
        (tmpvar_55 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_61.x * tmpvar_53.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_61.x * tmpvar_53.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_61.x * tmpvar_53.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_50 * tmpvar_63);
      vDirection_26 = (tmpvar_64 * _glesNormal);
      vPos_25 = (normalize((tmpvar_64 * vPos_29)) * tmpvar_46);
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  highp vec3 tmpvar_65;
  tmpvar_65 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  FinalPosition_15 = tmpvar_65;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = tmpvar_65;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = tmpvar_65;
      highp float fAdherenceScale_68;
      highp vec3 tmpvar_69;
      tmpvar_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_70;
      tmpvar_70 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (tmpvar_70 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((tmpvar_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_70 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((tmpvar_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        (mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_71.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (tmpvar_65 + ((tmpvar_69 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((tmpvar_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((
        ((tmpvar_79.x * tmpvar_79.y) * tmpvar_79.x)
       * tmpvar_79.y) * _ST_WindTurbulences.x));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp vec3 tmpvar_82;
      tmpvar_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_83;
      tmpvar_83 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_84;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (tmpvar_83 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((tmpvar_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      vPos_81 = (vPos_66 + ((tmpvar_82 * 
        (((mix (
          mix (tmpvar_89, fTarget_86, fAmount_85)
        , fTarget_86, fAmount_85) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_15;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_94.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    vPos_90.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * (
      ((_ST_WindGlobal.y * (tmpvar_95.x + (tmpvar_95.y * tmpvar_95.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_91)));
    vPos_90 = (normalize(vPos_90) * fLength_92);
    FinalPosition_15 = vPos_90;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_97;
  highp vec3 viewN_98;
  highp vec3 viewpos_99;
  viewpos_99 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_100;
  tmpvar_100[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_100[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_100[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_98 = normalize((tmpvar_100 * tmpvar_12));
  lowp vec3 tmpvar_101;
  tmpvar_101 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_97 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (unity_LightPosition[0].xyz - (viewpos_99 * unity_LightPosition[0].w));
  highp float tmpvar_103;
  tmpvar_103 = dot (tmpvar_102, tmpvar_102);
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_102 * inversesqrt(tmpvar_103));
  lightColor_97 = (lightColor_97 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_98, tmpvar_104))
   * 
    ((1.0/((1.0 + (tmpvar_103 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_104, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[1].xyz - (viewpos_99 * unity_LightPosition[1].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_97 = (lightColor_97 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_98, tmpvar_107))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_107, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[2].xyz - (viewpos_99 * unity_LightPosition[2].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_97 = (lightColor_97 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_98, tmpvar_110))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_110, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[3].xyz - (viewpos_99 * unity_LightPosition[3].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_97 = (lightColor_97 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_98, tmpvar_113))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_113, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_4.xyz * lightColor_97);
  tmpvar_3.xyz = tmpvar_114;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  mediump float tmpvar_5;
  tmpvar_5 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_5;
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_7 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_8;
  tmpvar_8 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  _glesFragData[0] = tmpvar_9;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fAdherenceScale_19;
      highp vec3 tmpvar_20;
      tmpvar_20 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_21;
      tmpvar_21 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (tmpvar_21 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((tmpvar_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_21 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((tmpvar_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        (mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_22.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((tmpvar_20 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((tmpvar_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_19 = (1.0 - ((
        ((tmpvar_30.x * tmpvar_30.y) * tmpvar_30.x)
       * tmpvar_30.y) * _ST_WindTurbulences.x));
      fAdherenceScale_19 = (fAdherenceScale_19 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_19) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.w = 0.0;
      tmpvar_38.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      vPos_32 = (vPos_17 + ((tmpvar_33 * 
        (((mix (
          mix (tmpvar_40, fTarget_37, fAmount_36)
        , fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_41;
    vPos_41 = FinalPosition_11;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    vPos_41.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * (
      ((_ST_WindGlobal.y * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_42)));
    vPos_41 = (normalize(vPos_41) * fLength_43);
    FinalPosition_11 = vPos_41;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_8);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  highp vec3 tmpvar_52;
  tmpvar_52 = o_49.xyw;
  tmpvar_5 = tmpvar_52;
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_5.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5.xy = tmpvar_53;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_54;
  highp vec3 viewN_55;
  highp vec3 viewpos_56;
  viewpos_56 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_57[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_57[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_55 = normalize((tmpvar_57 * _glesNormal));
  lowp vec3 tmpvar_58;
  tmpvar_58 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_54 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[0].xyz - (viewpos_56 * unity_LightPosition[0].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_54 = (lightColor_54 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_55, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[1].xyz - (viewpos_56 * unity_LightPosition[1].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_54 = (lightColor_54 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_55, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[2].xyz - (viewpos_56 * unity_LightPosition[2].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_54 = (lightColor_54 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_55, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[3].xyz - (viewpos_56 * unity_LightPosition[3].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_54 = (lightColor_54 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_55, tmpvar_70))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_70, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_3.xyz * lightColor_54);
  tmpvar_2.xyz = tmpvar_71;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_myScreenPos = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = tmpvar_1;
  tmpvar_12.w = tmpvar_2;
  gl_FragData[0] = tmpvar_12;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fAdherenceScale_19;
      highp vec3 tmpvar_20;
      tmpvar_20 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_21;
      tmpvar_21 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (tmpvar_21 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((tmpvar_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_21 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((tmpvar_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        (mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_22.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((tmpvar_20 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((tmpvar_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_19 = (1.0 - ((
        ((tmpvar_30.x * tmpvar_30.y) * tmpvar_30.x)
       * tmpvar_30.y) * _ST_WindTurbulences.x));
      fAdherenceScale_19 = (fAdherenceScale_19 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_19) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp vec3 tmpvar_33;
      tmpvar_33 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_34;
      tmpvar_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fAmount_36;
      highp float fTarget_37;
      highp vec4 tmpvar_38;
      tmpvar_38.w = 0.0;
      tmpvar_38.x = (tmpvar_34 + _glesMultiTexCoord0.w);
      tmpvar_38.y = ((tmpvar_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_38.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      highp float tmpvar_40;
      tmpvar_40 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_37 = 1.0;
      fAmount_36 = tmpvar_40;
      if ((tmpvar_40 < 0.0)) {
        fTarget_37 = -1.0;
        fAmount_36 = -(tmpvar_40);
      };
      vPos_32 = (vPos_17 + ((tmpvar_33 * 
        (((mix (
          mix (tmpvar_40, fTarget_37, fAmount_36)
        , fTarget_37, fAmount_36) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_41;
    vPos_41 = FinalPosition_11;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    vPos_41.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * (
      ((_ST_WindGlobal.y * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_42)));
    vPos_41 = (normalize(vPos_41) * fLength_43);
    FinalPosition_11 = vPos_41;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 tmpvar_48;
  tmpvar_48 = (glstate_matrix_mvp * tmpvar_8);
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_48 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_48.zw;
  highp vec3 tmpvar_52;
  tmpvar_52 = o_49.xyw;
  tmpvar_5 = tmpvar_52;
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_5.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5.xy = tmpvar_53;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_54;
  highp vec3 viewN_55;
  highp vec3 viewpos_56;
  viewpos_56 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_57[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_57[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_55 = normalize((tmpvar_57 * _glesNormal));
  lowp vec3 tmpvar_58;
  tmpvar_58 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_54 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[0].xyz - (viewpos_56 * unity_LightPosition[0].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_54 = (lightColor_54 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_55, tmpvar_61))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_61, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[1].xyz - (viewpos_56 * unity_LightPosition[1].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_54 = (lightColor_54 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_55, tmpvar_64))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_64, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[2].xyz - (viewpos_56 * unity_LightPosition[2].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_54 = (lightColor_54 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_55, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[3].xyz - (viewpos_56 * unity_LightPosition[3].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_54 = (lightColor_54 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_55, tmpvar_70))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_70, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_3.xyz * lightColor_54);
  tmpvar_2.xyz = tmpvar_71;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_myScreenPos = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = tmpvar_1;
  tmpvar_12.w = tmpvar_2;
  _glesFragData[0] = tmpvar_12;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_14;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_47.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_14 = vPos_43;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_50;
  tmpvar_50 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_50.zw;
  highp vec3 tmpvar_54;
  tmpvar_54 = o_51.xyw;
  tmpvar_5 = tmpvar_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = (tmpvar_5.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5.xy = tmpvar_55;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, tmpvar_72))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_72, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_3.xyz * lightColor_56);
  tmpvar_2.xyz = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_myScreenPos = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = tmpvar_1;
  tmpvar_13.w = tmpvar_2;
  gl_FragData[0] = tmpvar_13;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_6;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_7;
  highp float cse_8;
  cse_8 = _Object2World[3].x;
  highp float cse_9;
  cse_9 = _Object2World[3].y;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((
    fract(((cse_8 + cse_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (cse_8 + cse_9));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_14;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (cse_8 + _ST_WindGlobal.x);
    tmpvar_47.y = (cse_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_14 = vPos_43;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 tmpvar_50;
  tmpvar_50 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_50.zw;
  highp vec3 tmpvar_54;
  tmpvar_54 = o_51.xyw;
  tmpvar_5 = tmpvar_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = (tmpvar_5.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5.xy = tmpvar_55;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, tmpvar_72))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_72, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_3.xyz * lightColor_56);
  tmpvar_2.xyz = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_myScreenPos = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_11 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = tmpvar_1;
  tmpvar_13.w = tmpvar_2;
  _glesFragData[0] = tmpvar_13;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_7;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_13;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_13 = vPos_43;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 tmpvar_50;
  tmpvar_50 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_50.zw;
  highp vec3 tmpvar_54;
  tmpvar_54 = o_51.xyw;
  tmpvar_6 = tmpvar_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_55;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, tmpvar_72))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_72, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_3.xyz * lightColor_56);
  tmpvar_2.xyz = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_12;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  gl_FragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_7;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_13;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_13 = vPos_43;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 tmpvar_50;
  tmpvar_50 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_50.zw;
  highp vec3 tmpvar_54;
  tmpvar_54 = o_51.xyw;
  tmpvar_6 = tmpvar_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_55;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, tmpvar_72))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_72, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_3.xyz * lightColor_56);
  tmpvar_2.xyz = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_12;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  _glesFragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_7;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_16;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_16 = vPos_45;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_6 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_57;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_58;
  highp vec3 viewN_59;
  highp vec3 viewpos_60;
  viewpos_60 = (glstate_matrix_modelview0 * tmpvar_13).xyz;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_61[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_61[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_59 = normalize((tmpvar_61 * _glesNormal));
  lowp vec3 tmpvar_62;
  tmpvar_62 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_58 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[0].xyz - (viewpos_60 * unity_LightPosition[0].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_58 = (lightColor_58 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_59, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[1].xyz - (viewpos_60 * unity_LightPosition[1].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_58 = (lightColor_58 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_59, tmpvar_68))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_68, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[2].xyz - (viewpos_60 * unity_LightPosition[2].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_58 = (lightColor_58 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_59, tmpvar_71))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_71, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_72;
  tmpvar_72 = (unity_LightPosition[3].xyz - (viewpos_60 * unity_LightPosition[3].w));
  highp float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_72);
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_72 * inversesqrt(tmpvar_73));
  lightColor_58 = (lightColor_58 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_59, tmpvar_74))
   * 
    ((1.0/((1.0 + (tmpvar_73 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_74, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_3.xyz * lightColor_58);
  tmpvar_2.xyz = tmpvar_75;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_12;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_1;
  tmpvar_15.w = tmpvar_2;
  gl_FragData[0] = tmpvar_15;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_7;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = _glesMultiTexCoord2.xy;
  tmpvar_5.xy = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_16;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_16 = vPos_45;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_6 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_57;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_58;
  highp vec3 viewN_59;
  highp vec3 viewpos_60;
  viewpos_60 = (glstate_matrix_modelview0 * tmpvar_13).xyz;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_61[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_61[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_59 = normalize((tmpvar_61 * _glesNormal));
  lowp vec3 tmpvar_62;
  tmpvar_62 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_58 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[0].xyz - (viewpos_60 * unity_LightPosition[0].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_58 = (lightColor_58 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_59, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[1].xyz - (viewpos_60 * unity_LightPosition[1].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_58 = (lightColor_58 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_59, tmpvar_68))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_68, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[2].xyz - (viewpos_60 * unity_LightPosition[2].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_58 = (lightColor_58 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_59, tmpvar_71))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_71, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_72;
  tmpvar_72 = (unity_LightPosition[3].xyz - (viewpos_60 * unity_LightPosition[3].w));
  highp float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_72);
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_72 * inversesqrt(tmpvar_73));
  lightColor_58 = (lightColor_58 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_59, tmpvar_74))
   * 
    ((1.0/((1.0 + (tmpvar_73 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_74, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_3.xyz * lightColor_58);
  tmpvar_2.xyz = tmpvar_75;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 detailColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_DetailTex, xlv_Input_interpolator2.xy);
  detailColor_3 = tmpvar_12;
  diffuseColor_4.xyz = mix (diffuseColor_4.xyz, detailColor_3.xyz, detailColor_3.www);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_1;
  tmpvar_15.w = tmpvar_2;
  _glesFragData[0] = tmpvar_15;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_7;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_13;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_13 = vPos_43;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 tmpvar_50;
  tmpvar_50 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_50.zw;
  highp vec3 tmpvar_54;
  tmpvar_54 = o_51.xyw;
  tmpvar_6 = tmpvar_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_55;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, tmpvar_72))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_72, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_3.xyz * lightColor_56);
  tmpvar_2.xyz = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_12;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  gl_FragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_7;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fAdherenceScale_21;
      highp vec3 tmpvar_22;
      tmpvar_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_23;
      tmpvar_23 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (tmpvar_23 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((tmpvar_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_23 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((tmpvar_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        (mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_24.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((tmpvar_22 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((tmpvar_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((
        ((tmpvar_32.x * tmpvar_32.y) * tmpvar_32.x)
       * tmpvar_32.y) * _ST_WindTurbulences.x));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp vec3 tmpvar_35;
      tmpvar_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_36;
      tmpvar_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (tmpvar_36 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((tmpvar_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      vPos_34 = (vPos_19 + ((tmpvar_35 * 
        (((mix (
          mix (tmpvar_42, fTarget_39, fAmount_38)
        , fTarget_39, fAmount_38) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_13;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    vPos_43.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_44)));
    vPos_43 = (normalize(vPos_43) * fLength_45);
    FinalPosition_13 = vPos_43;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 tmpvar_50;
  tmpvar_50 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_50.zw;
  highp vec3 tmpvar_54;
  tmpvar_54 = o_51.xyw;
  tmpvar_6 = tmpvar_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_55;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, tmpvar_63))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_63, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, tmpvar_66))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_66, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, tmpvar_72))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_72, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_3.xyz * lightColor_56);
  tmpvar_2.xyz = tmpvar_73;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_12;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  _glesFragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_7;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_16;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_16 = vPos_45;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_6 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_57;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_58;
  highp vec3 viewN_59;
  highp vec3 viewpos_60;
  viewpos_60 = (glstate_matrix_modelview0 * tmpvar_13).xyz;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_61[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_61[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_59 = normalize((tmpvar_61 * _glesNormal));
  lowp vec3 tmpvar_62;
  tmpvar_62 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_58 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[0].xyz - (viewpos_60 * unity_LightPosition[0].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_58 = (lightColor_58 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_59, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[1].xyz - (viewpos_60 * unity_LightPosition[1].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_58 = (lightColor_58 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_59, tmpvar_68))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_68, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[2].xyz - (viewpos_60 * unity_LightPosition[2].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_58 = (lightColor_58 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_59, tmpvar_71))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_71, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_72;
  tmpvar_72 = (unity_LightPosition[3].xyz - (viewpos_60 * unity_LightPosition[3].w));
  highp float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_72);
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_72 * inversesqrt(tmpvar_73));
  lightColor_58 = (lightColor_58 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_59, tmpvar_74))
   * 
    ((1.0/((1.0 + (tmpvar_73 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_74, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_3.xyz * lightColor_58);
  tmpvar_2.xyz = tmpvar_75;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_12;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_1;
  tmpvar_15.w = tmpvar_2;
  gl_FragData[0] = tmpvar_15;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_interpolator2;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  lowp vec4 tmpvar_2;
  lowp vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_4.xy = tmpvar_7;
  tmpvar_3.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_3.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_5 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fAdherenceScale_23;
      highp vec3 tmpvar_24;
      tmpvar_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_25;
      tmpvar_25 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (tmpvar_25 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((tmpvar_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_25 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((tmpvar_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        (mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_26.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((tmpvar_24 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((tmpvar_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((
        ((tmpvar_34.x * tmpvar_34.y) * tmpvar_34.x)
       * tmpvar_34.y) * _ST_WindTurbulences.x));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp vec3 tmpvar_37;
      tmpvar_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_38;
      tmpvar_38 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_39;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (tmpvar_38 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((tmpvar_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      vPos_36 = (vPos_21 + ((tmpvar_37 * 
        (((mix (
          mix (tmpvar_44, fTarget_41, fAmount_40)
        , fTarget_41, fAmount_40) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_16;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    vPos_45.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_46)));
    vPos_45 = (normalize(vPos_45) * fLength_47);
    FinalPosition_16 = vPos_45;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 tmpvar_52;
  tmpvar_52 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_52 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_52.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  tmpvar_6 = tmpvar_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_57;
  tmpvar_2.w = tmpvar_3.w;
  highp vec3 lightColor_58;
  highp vec3 viewN_59;
  highp vec3 viewpos_60;
  viewpos_60 = (glstate_matrix_modelview0 * tmpvar_13).xyz;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_61[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_61[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_59 = normalize((tmpvar_61 * _glesNormal));
  lowp vec3 tmpvar_62;
  tmpvar_62 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_58 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[0].xyz - (viewpos_60 * unity_LightPosition[0].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_58 = (lightColor_58 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_59, tmpvar_65))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_65, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[1].xyz - (viewpos_60 * unity_LightPosition[1].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_58 = (lightColor_58 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_59, tmpvar_68))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_68, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[2].xyz - (viewpos_60 * unity_LightPosition[2].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_58 = (lightColor_58 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_59, tmpvar_71))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_71, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_72;
  tmpvar_72 = (unity_LightPosition[3].xyz - (viewpos_60 * unity_LightPosition[3].w));
  highp float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_72);
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_72 * inversesqrt(tmpvar_73));
  lightColor_58 = (lightColor_58 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_59, tmpvar_74))
   * 
    ((1.0/((1.0 + (tmpvar_73 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_74, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_3.xyz * lightColor_58);
  tmpvar_2.xyz = tmpvar_75;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_interpolator2 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_interpolator2;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  mediump float tmpvar_7;
  tmpvar_7 = fract(tmpvar_6.y);
  highp float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * 0.0625) + unity_LODFade.y);
  projUV_5.y = tmpvar_8;
  lowp float x_9;
  x_9 = (texture (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = (diffuseColor_4.w * _Color.w);
  tmpvar_2 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_12;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_4.xyz = clamp ((tmpvar_13 * (
    ((max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.xyz = tmpvar_1;
  tmpvar_15.w = tmpvar_2;
  _glesFragData[0] = tmpvar_15;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_13;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_13 = vPos_47;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_6 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_59;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_60;
  highp vec3 viewN_61;
  highp vec3 viewpos_62;
  viewpos_62 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_63[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_63[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_61 = normalize((tmpvar_63 * tmpvar_10));
  lowp vec3 tmpvar_64;
  tmpvar_64 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_60 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[0].xyz - (viewpos_62 * unity_LightPosition[0].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_60 = (lightColor_60 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_61, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[1].xyz - (viewpos_62 * unity_LightPosition[1].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_60 = (lightColor_60 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_61, tmpvar_70))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_70, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_71;
  tmpvar_71 = (unity_LightPosition[2].xyz - (viewpos_62 * unity_LightPosition[2].w));
  highp float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_71);
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_71 * inversesqrt(tmpvar_72));
  lightColor_60 = (lightColor_60 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_61, tmpvar_73))
   * 
    ((1.0/((1.0 + (tmpvar_72 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_73, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_74;
  tmpvar_74 = (unity_LightPosition[3].xyz - (viewpos_62 * unity_LightPosition[3].w));
  highp float tmpvar_75;
  tmpvar_75 = dot (tmpvar_74, tmpvar_74);
  highp vec3 tmpvar_76;
  tmpvar_76 = (tmpvar_74 * inversesqrt(tmpvar_75));
  lightColor_60 = (lightColor_60 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_61, tmpvar_76))
   * 
    ((1.0/((1.0 + (tmpvar_75 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_76, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_4.xyz * lightColor_60);
  tmpvar_3.xyz = tmpvar_77;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = tmpvar_1;
  tmpvar_13.w = tmpvar_2;
  gl_FragData[0] = tmpvar_13;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fAdherenceScale_25;
      highp vec3 tmpvar_26;
      tmpvar_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_27;
      tmpvar_27 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (tmpvar_27 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((tmpvar_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_27 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((tmpvar_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        (mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_28.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((tmpvar_26 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((tmpvar_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((
        ((tmpvar_36.x * tmpvar_36.y) * tmpvar_36.x)
       * tmpvar_36.y) * _ST_WindTurbulences.x));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp vec3 tmpvar_39;
      tmpvar_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_40;
      tmpvar_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (tmpvar_40 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((tmpvar_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      vPos_38 = (vPos_23 + ((tmpvar_39 * 
        (((mix (
          mix (tmpvar_46, fTarget_43, fAmount_42)
        , fTarget_43, fAmount_42) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_13;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    vPos_47.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_52.x + (tmpvar_52.y * tmpvar_52.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_48)));
    vPos_47 = (normalize(vPos_47) * fLength_49);
    FinalPosition_13 = vPos_47;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 tmpvar_54;
  tmpvar_54 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_54 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_54.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  tmpvar_6 = tmpvar_58;
  highp vec2 tmpvar_59;
  tmpvar_59 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_59;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_60;
  highp vec3 viewN_61;
  highp vec3 viewpos_62;
  viewpos_62 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_63[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_63[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_61 = normalize((tmpvar_63 * tmpvar_10));
  lowp vec3 tmpvar_64;
  tmpvar_64 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_60 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[0].xyz - (viewpos_62 * unity_LightPosition[0].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_60 = (lightColor_60 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_61, tmpvar_67))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_67, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[1].xyz - (viewpos_62 * unity_LightPosition[1].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_60 = (lightColor_60 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_61, tmpvar_70))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_70, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_71;
  tmpvar_71 = (unity_LightPosition[2].xyz - (viewpos_62 * unity_LightPosition[2].w));
  highp float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_71);
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_71 * inversesqrt(tmpvar_72));
  lightColor_60 = (lightColor_60 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_61, tmpvar_73))
   * 
    ((1.0/((1.0 + (tmpvar_72 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_73, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_74;
  tmpvar_74 = (unity_LightPosition[3].xyz - (viewpos_62 * unity_LightPosition[3].w));
  highp float tmpvar_75;
  tmpvar_75 = dot (tmpvar_74, tmpvar_74);
  highp vec3 tmpvar_76;
  tmpvar_76 = (tmpvar_74 * inversesqrt(tmpvar_75));
  lightColor_60 = (lightColor_60 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_61, tmpvar_76))
   * 
    ((1.0/((1.0 + (tmpvar_75 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_76, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_4.xyz * lightColor_60);
  tmpvar_3.xyz = tmpvar_77;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = tmpvar_1;
  tmpvar_13.w = tmpvar_2;
  _glesFragData[0] = tmpvar_13;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_16;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_16 = vPos_49;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_6 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_61;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_62;
  highp vec3 viewN_63;
  highp vec3 viewpos_64;
  viewpos_64 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_65[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_65[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_63 = normalize((tmpvar_65 * tmpvar_13));
  lowp vec3 tmpvar_66;
  tmpvar_66 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_62 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[0].xyz - (viewpos_64 * unity_LightPosition[0].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_62 = (lightColor_62 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_63, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[1].xyz - (viewpos_64 * unity_LightPosition[1].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_62 = (lightColor_62 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_63, tmpvar_72))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_72, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_73;
  tmpvar_73 = (unity_LightPosition[2].xyz - (viewpos_64 * unity_LightPosition[2].w));
  highp float tmpvar_74;
  tmpvar_74 = dot (tmpvar_73, tmpvar_73);
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * inversesqrt(tmpvar_74));
  lightColor_62 = (lightColor_62 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_63, tmpvar_75))
   * 
    ((1.0/((1.0 + (tmpvar_74 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_75, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_76;
  tmpvar_76 = (unity_LightPosition[3].xyz - (viewpos_64 * unity_LightPosition[3].w));
  highp float tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_76);
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_76 * inversesqrt(tmpvar_77));
  lightColor_62 = (lightColor_62 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_63, tmpvar_78))
   * 
    ((1.0/((1.0 + (tmpvar_77 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_78, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_4.xyz * lightColor_62);
  tmpvar_3.xyz = tmpvar_79;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  gl_FragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fAdherenceScale_27;
      highp vec3 tmpvar_28;
      tmpvar_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_29;
      tmpvar_29 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_29 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((tmpvar_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_29 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((tmpvar_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        (mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_30.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((tmpvar_28 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((tmpvar_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((
        ((tmpvar_38.x * tmpvar_38.y) * tmpvar_38.x)
       * tmpvar_38.y) * _ST_WindTurbulences.x));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp vec3 tmpvar_41;
      tmpvar_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_42;
      tmpvar_42 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_43;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (tmpvar_42 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((tmpvar_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      vPos_40 = (vPos_25 + ((tmpvar_41 * 
        (((mix (
          mix (tmpvar_48, fTarget_45, fAmount_44)
        , fTarget_45, fAmount_44) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_16;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_53.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    vPos_49.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_54.x + (tmpvar_54.y * tmpvar_54.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_50)));
    vPos_49 = (normalize(vPos_49) * fLength_51);
    FinalPosition_16 = vPos_49;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_56;
  tmpvar_56 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_56.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  tmpvar_6 = tmpvar_60;
  highp vec2 tmpvar_61;
  tmpvar_61 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_61;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_62;
  highp vec3 viewN_63;
  highp vec3 viewpos_64;
  viewpos_64 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_65[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_65[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_63 = normalize((tmpvar_65 * tmpvar_13));
  lowp vec3 tmpvar_66;
  tmpvar_66 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_62 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[0].xyz - (viewpos_64 * unity_LightPosition[0].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_62 = (lightColor_62 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_63, tmpvar_69))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_69, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[1].xyz - (viewpos_64 * unity_LightPosition[1].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_62 = (lightColor_62 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_63, tmpvar_72))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_72, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_73;
  tmpvar_73 = (unity_LightPosition[2].xyz - (viewpos_64 * unity_LightPosition[2].w));
  highp float tmpvar_74;
  tmpvar_74 = dot (tmpvar_73, tmpvar_73);
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * inversesqrt(tmpvar_74));
  lightColor_62 = (lightColor_62 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_63, tmpvar_75))
   * 
    ((1.0/((1.0 + (tmpvar_74 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_75, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_76;
  tmpvar_76 = (unity_LightPosition[3].xyz - (viewpos_64 * unity_LightPosition[3].w));
  highp float tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_76);
  highp vec3 tmpvar_78;
  tmpvar_78 = (tmpvar_76 * inversesqrt(tmpvar_77));
  lightColor_62 = (lightColor_62 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_63, tmpvar_78))
   * 
    ((1.0/((1.0 + (tmpvar_77 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_78, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_4.xyz * lightColor_62);
  tmpvar_3.xyz = tmpvar_79;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  _glesFragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_13 = tmpvar_18;
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_15 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (tmpvar_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp vec3 tmpvar_38;
      tmpvar_38 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_39;
      tmpvar_39 = ((tmpvar_38.x + tmpvar_38.y) + tmpvar_38.z);
      highp vec4 tmpvar_40;
      tmpvar_40.x = (tmpvar_30 + tmpvar_39);
      tmpvar_40.y = ((tmpvar_30 * 0.75) - tmpvar_39);
      tmpvar_40.z = ((tmpvar_30 * 0.01) + tmpvar_39);
      tmpvar_40.w = (tmpvar_30 + tmpvar_39);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_44;
      fAngle_44 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_41.x + (tmpvar_41.y * tmpvar_41.y)));
      highp vec2 vSinCos_45;
      vSinCos_45.x = sin(fAngle_44);
      vSinCos_45.y = cos(fAngle_44);
      highp float tmpvar_46;
      tmpvar_46 = (1.0 - vSinCos_45.y);
      highp mat3 tmpvar_47;
      tmpvar_47[0].x = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_45.y);
      tmpvar_47[0].y = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_45.x * tmpvar_29.z));
      tmpvar_47[0].z = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_45.x * tmpvar_29.y));
      tmpvar_47[1].x = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_45.x * tmpvar_29.z));
      tmpvar_47[1].y = (((tmpvar_46 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_45.y);
      tmpvar_47[1].z = (((tmpvar_46 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_45.x * tmpvar_29.x));
      tmpvar_47[2].x = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_45.x * tmpvar_29.y));
      tmpvar_47[2].y = (((tmpvar_46 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_45.x * tmpvar_29.x));
      tmpvar_47[2].z = (((tmpvar_46 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_45.y);
      highp vec3 tmpvar_48;
      tmpvar_48 = ((tmpvar_29.yzx * vRotatedWindVector_12.zxy) - (tmpvar_29.zxy * vRotatedWindVector_12.yzx));
      vAxis_37.xz = tmpvar_48.xz;
      highp float tmpvar_49;
      tmpvar_49 = clamp (dot (vRotatedWindVector_12, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_48.y + tmpvar_49);
      highp vec3 tmpvar_50;
      tmpvar_50 = normalize(vAxis_37);
      vAxis_37 = tmpvar_50;
      highp float tmpvar_51;
      tmpvar_51 = (1.570796 - (sign(tmpvar_49) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_49))) * (1.570796 + (abs(tmpvar_49) * (-0.2146018 + 
          (abs(tmpvar_49) * (0.08656672 + (abs(tmpvar_49) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_52;
      tmpvar_52 = (tmpvar_41.y - (tmpvar_41.x * tmpvar_41.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_53;
        fTime_53 = (tmpvar_34.z + tmpvar_39);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_51 * tmpvar_33)
       + 
        (tmpvar_52 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.y) + (vSinCos_58.x * tmpvar_50.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.z) - (vSinCos_58.x * tmpvar_50.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.y) - (vSinCos_58.x * tmpvar_50.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_50.y) * tmpvar_50.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_50.y) * tmpvar_50.z) + (vSinCos_58.x * tmpvar_50.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.z) + (vSinCos_58.x * tmpvar_50.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_50.y) * tmpvar_50.z) - (vSinCos_58.x * tmpvar_50.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_50.z) * tmpvar_50.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_47 * tmpvar_60);
      vDirection_23 = (tmpvar_61 * _glesNormal);
      vPos_22 = (normalize((tmpvar_61 * vPos_26)) * tmpvar_43);
    };
    tmpvar_10 = vDirection_23;
    FinalPosition_13 = vPos_22;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  FinalPosition_13 = tmpvar_62;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = tmpvar_62;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = tmpvar_62;
      highp float fAdherenceScale_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_67;
      tmpvar_67 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (tmpvar_67 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((tmpvar_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_67 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((tmpvar_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        (mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_68.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (tmpvar_62 + ((tmpvar_66 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((tmpvar_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((
        ((tmpvar_76.x * tmpvar_76.y) * tmpvar_76.x)
       * tmpvar_76.y) * _ST_WindTurbulences.x));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_11 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp vec3 tmpvar_79;
      tmpvar_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_80;
      tmpvar_80 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_81;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (tmpvar_80 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((tmpvar_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      vPos_78 = (vPos_63 + ((tmpvar_79 * 
        (((mix (
          mix (tmpvar_86, fTarget_83, fAmount_82)
        , fTarget_83, fAmount_82) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_13 = vPos_63;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fAdjust_88;
    highp float fLength_89;
    fLength_89 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_90;
    tmpvar_90 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_88 = tmpvar_90;
    if ((tmpvar_90 != 0.0)) {
      fAdjust_88 = pow (tmpvar_90, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_91;
    tmpvar_91.zw = vec2(0.0, 0.0);
    tmpvar_91.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_91.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_92;
    highp vec4 tmpvar_93;
    tmpvar_93 = abs(((
      fract((tmpvar_91 + 0.5))
     * 2.0) - 1.0));
    tmpvar_92 = (((
      (tmpvar_93 * tmpvar_93)
     * 
      (3.0 - (2.0 * tmpvar_93))
    ) - 0.5) * 2.0);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_92.x + (tmpvar_92.y * tmpvar_92.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_88)));
    vPos_87 = (normalize(vPos_87) * fLength_89);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 tmpvar_94;
  tmpvar_94 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_95;
  highp vec4 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * 0.5);
  highp vec2 tmpvar_97;
  tmpvar_97.x = tmpvar_96.x;
  tmpvar_97.y = (tmpvar_96.y * _ProjectionParams.x);
  o_95.xy = (tmpvar_97 + tmpvar_96.w);
  o_95.zw = tmpvar_94.zw;
  highp vec3 tmpvar_98;
  tmpvar_98 = o_95.xyw;
  tmpvar_6 = tmpvar_98;
  highp vec2 tmpvar_99;
  tmpvar_99 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_99;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_100;
  highp vec3 viewN_101;
  highp vec3 viewpos_102;
  viewpos_102 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_103;
  tmpvar_103[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_103[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_103[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_101 = normalize((tmpvar_103 * tmpvar_10));
  lowp vec3 tmpvar_104;
  tmpvar_104 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_100 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[0].xyz - (viewpos_102 * unity_LightPosition[0].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_100 = (lightColor_100 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_101, tmpvar_107))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_107, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[1].xyz - (viewpos_102 * unity_LightPosition[1].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_100 = (lightColor_100 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_101, tmpvar_110))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_110, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[2].xyz - (viewpos_102 * unity_LightPosition[2].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_100 = (lightColor_100 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_101, tmpvar_113))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_113, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_114;
  tmpvar_114 = (unity_LightPosition[3].xyz - (viewpos_102 * unity_LightPosition[3].w));
  highp float tmpvar_115;
  tmpvar_115 = dot (tmpvar_114, tmpvar_114);
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_114 * inversesqrt(tmpvar_115));
  lightColor_100 = (lightColor_100 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_101, tmpvar_116))
   * 
    ((1.0/((1.0 + (tmpvar_115 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_116, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_4.xyz * lightColor_100);
  tmpvar_3.xyz = tmpvar_117;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = tmpvar_1;
  tmpvar_13.w = tmpvar_2;
  gl_FragData[0] = tmpvar_13;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_13 = tmpvar_18;
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_15 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (tmpvar_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp vec3 tmpvar_38;
      tmpvar_38 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_39;
      tmpvar_39 = ((tmpvar_38.x + tmpvar_38.y) + tmpvar_38.z);
      highp vec4 tmpvar_40;
      tmpvar_40.x = (tmpvar_30 + tmpvar_39);
      tmpvar_40.y = ((tmpvar_30 * 0.75) - tmpvar_39);
      tmpvar_40.z = ((tmpvar_30 * 0.01) + tmpvar_39);
      tmpvar_40.w = (tmpvar_30 + tmpvar_39);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_44;
      fAngle_44 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_41.x + (tmpvar_41.y * tmpvar_41.y)));
      highp vec2 vSinCos_45;
      vSinCos_45.x = sin(fAngle_44);
      vSinCos_45.y = cos(fAngle_44);
      highp float tmpvar_46;
      tmpvar_46 = (1.0 - vSinCos_45.y);
      highp mat3 tmpvar_47;
      tmpvar_47[0].x = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_45.y);
      tmpvar_47[0].y = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_45.x * tmpvar_29.z));
      tmpvar_47[0].z = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_45.x * tmpvar_29.y));
      tmpvar_47[1].x = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_45.x * tmpvar_29.z));
      tmpvar_47[1].y = (((tmpvar_46 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_45.y);
      tmpvar_47[1].z = (((tmpvar_46 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_45.x * tmpvar_29.x));
      tmpvar_47[2].x = (((tmpvar_46 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_45.x * tmpvar_29.y));
      tmpvar_47[2].y = (((tmpvar_46 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_45.x * tmpvar_29.x));
      tmpvar_47[2].z = (((tmpvar_46 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_45.y);
      highp vec3 tmpvar_48;
      tmpvar_48 = ((tmpvar_29.yzx * vRotatedWindVector_12.zxy) - (tmpvar_29.zxy * vRotatedWindVector_12.yzx));
      vAxis_37.xz = tmpvar_48.xz;
      highp float tmpvar_49;
      tmpvar_49 = clamp (dot (vRotatedWindVector_12, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_48.y + tmpvar_49);
      highp vec3 tmpvar_50;
      tmpvar_50 = normalize(vAxis_37);
      vAxis_37 = tmpvar_50;
      highp float tmpvar_51;
      tmpvar_51 = (1.570796 - (sign(tmpvar_49) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_49))) * (1.570796 + (abs(tmpvar_49) * (-0.2146018 + 
          (abs(tmpvar_49) * (0.08656672 + (abs(tmpvar_49) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_52;
      tmpvar_52 = (tmpvar_41.y - (tmpvar_41.x * tmpvar_41.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_53;
        fTime_53 = (tmpvar_34.z + tmpvar_39);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_51 * tmpvar_33)
       + 
        (tmpvar_52 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.y) + (vSinCos_58.x * tmpvar_50.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.z) - (vSinCos_58.x * tmpvar_50.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.y) - (vSinCos_58.x * tmpvar_50.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_50.y) * tmpvar_50.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_50.y) * tmpvar_50.z) + (vSinCos_58.x * tmpvar_50.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_50.x) * tmpvar_50.z) + (vSinCos_58.x * tmpvar_50.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_50.y) * tmpvar_50.z) - (vSinCos_58.x * tmpvar_50.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_50.z) * tmpvar_50.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_47 * tmpvar_60);
      vDirection_23 = (tmpvar_61 * _glesNormal);
      vPos_22 = (normalize((tmpvar_61 * vPos_26)) * tmpvar_43);
    };
    tmpvar_10 = vDirection_23;
    FinalPosition_13 = vPos_22;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  FinalPosition_13 = tmpvar_62;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = tmpvar_62;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = tmpvar_62;
      highp float fAdherenceScale_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_67;
      tmpvar_67 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (tmpvar_67 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((tmpvar_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_67 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((tmpvar_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        (mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_68.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (tmpvar_62 + ((tmpvar_66 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((tmpvar_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((
        ((tmpvar_76.x * tmpvar_76.y) * tmpvar_76.x)
       * tmpvar_76.y) * _ST_WindTurbulences.x));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_11 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp vec3 tmpvar_79;
      tmpvar_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_80;
      tmpvar_80 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_81;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (tmpvar_80 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((tmpvar_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      vPos_78 = (vPos_63 + ((tmpvar_79 * 
        (((mix (
          mix (tmpvar_86, fTarget_83, fAmount_82)
        , fTarget_83, fAmount_82) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_13 = vPos_63;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fAdjust_88;
    highp float fLength_89;
    fLength_89 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_90;
    tmpvar_90 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_88 = tmpvar_90;
    if ((tmpvar_90 != 0.0)) {
      fAdjust_88 = pow (tmpvar_90, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_91;
    tmpvar_91.zw = vec2(0.0, 0.0);
    tmpvar_91.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_91.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_92;
    highp vec4 tmpvar_93;
    tmpvar_93 = abs(((
      fract((tmpvar_91 + 0.5))
     * 2.0) - 1.0));
    tmpvar_92 = (((
      (tmpvar_93 * tmpvar_93)
     * 
      (3.0 - (2.0 * tmpvar_93))
    ) - 0.5) * 2.0);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_92.x + (tmpvar_92.y * tmpvar_92.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_88)));
    vPos_87 = (normalize(vPos_87) * fLength_89);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 tmpvar_94;
  tmpvar_94 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_95;
  highp vec4 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * 0.5);
  highp vec2 tmpvar_97;
  tmpvar_97.x = tmpvar_96.x;
  tmpvar_97.y = (tmpvar_96.y * _ProjectionParams.x);
  o_95.xy = (tmpvar_97 + tmpvar_96.w);
  o_95.zw = tmpvar_94.zw;
  highp vec3 tmpvar_98;
  tmpvar_98 = o_95.xyw;
  tmpvar_6 = tmpvar_98;
  highp vec2 tmpvar_99;
  tmpvar_99 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_99;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_100;
  highp vec3 viewN_101;
  highp vec3 viewpos_102;
  viewpos_102 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_103;
  tmpvar_103[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_103[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_103[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_101 = normalize((tmpvar_103 * tmpvar_10));
  lowp vec3 tmpvar_104;
  tmpvar_104 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_100 = tmpvar_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[0].xyz - (viewpos_102 * unity_LightPosition[0].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_100 = (lightColor_100 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_101, tmpvar_107))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_107, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[1].xyz - (viewpos_102 * unity_LightPosition[1].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_100 = (lightColor_100 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_101, tmpvar_110))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_110, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[2].xyz - (viewpos_102 * unity_LightPosition[2].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_100 = (lightColor_100 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_101, tmpvar_113))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_113, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_114;
  tmpvar_114 = (unity_LightPosition[3].xyz - (viewpos_102 * unity_LightPosition[3].w));
  highp float tmpvar_115;
  tmpvar_115 = dot (tmpvar_114, tmpvar_114);
  highp vec3 tmpvar_116;
  tmpvar_116 = (tmpvar_114 * inversesqrt(tmpvar_115));
  lightColor_100 = (lightColor_100 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_101, tmpvar_116))
   * 
    ((1.0/((1.0 + (tmpvar_115 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_116, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_4.xyz * lightColor_100);
  tmpvar_3.xyz = tmpvar_117;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = tmpvar_1;
  tmpvar_13.w = tmpvar_2;
  _glesFragData[0] = tmpvar_13;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_15.zxy) - (tmpvar_31.zxy * vRotatedWindVector_15.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_15, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_13 = vDirection_25;
    FinalPosition_16 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_14 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_16 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_93.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_6 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_101;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_102;
  highp vec3 viewN_103;
  highp vec3 viewpos_104;
  viewpos_104 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_105[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_105[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_103 = normalize((tmpvar_105 * tmpvar_13));
  lowp vec3 tmpvar_106;
  tmpvar_106 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_102 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[0].xyz - (viewpos_104 * unity_LightPosition[0].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_102 = (lightColor_102 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_103, tmpvar_109))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_109, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[1].xyz - (viewpos_104 * unity_LightPosition[1].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_102 = (lightColor_102 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_103, tmpvar_112))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_112, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_113;
  tmpvar_113 = (unity_LightPosition[2].xyz - (viewpos_104 * unity_LightPosition[2].w));
  highp float tmpvar_114;
  tmpvar_114 = dot (tmpvar_113, tmpvar_113);
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_113 * inversesqrt(tmpvar_114));
  lightColor_102 = (lightColor_102 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_103, tmpvar_115))
   * 
    ((1.0/((1.0 + (tmpvar_114 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_115, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_116;
  tmpvar_116 = (unity_LightPosition[3].xyz - (viewpos_104 * unity_LightPosition[3].w));
  highp float tmpvar_117;
  tmpvar_117 = dot (tmpvar_116, tmpvar_116);
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_116 * inversesqrt(tmpvar_117));
  lightColor_102 = (lightColor_102 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_103, tmpvar_118))
   * 
    ((1.0/((1.0 + (tmpvar_117 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_118, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_119;
  tmpvar_119 = (tmpvar_4.xyz * lightColor_102);
  tmpvar_3.xyz = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  gl_FragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_20;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_17 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_15.zxy) - (tmpvar_31.zxy * vRotatedWindVector_15.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_15, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_13 = vDirection_25;
    FinalPosition_16 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_64;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_14 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_16 = vPos_65;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_93.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_6 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_101;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_102;
  highp vec3 viewN_103;
  highp vec3 viewpos_104;
  viewpos_104 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_105[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_105[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_103 = normalize((tmpvar_105 * tmpvar_13));
  lowp vec3 tmpvar_106;
  tmpvar_106 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_102 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[0].xyz - (viewpos_104 * unity_LightPosition[0].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_102 = (lightColor_102 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_103, tmpvar_109))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_109, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[1].xyz - (viewpos_104 * unity_LightPosition[1].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_102 = (lightColor_102 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_103, tmpvar_112))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_112, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_113;
  tmpvar_113 = (unity_LightPosition[2].xyz - (viewpos_104 * unity_LightPosition[2].w));
  highp float tmpvar_114;
  tmpvar_114 = dot (tmpvar_113, tmpvar_113);
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_113 * inversesqrt(tmpvar_114));
  lightColor_102 = (lightColor_102 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_103, tmpvar_115))
   * 
    ((1.0/((1.0 + (tmpvar_114 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_115, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_116;
  tmpvar_116 = (unity_LightPosition[3].xyz - (viewpos_104 * unity_LightPosition[3].w));
  highp float tmpvar_117;
  tmpvar_117 = dot (tmpvar_116, tmpvar_116);
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_116 * inversesqrt(tmpvar_117));
  lightColor_102 = (lightColor_102 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_103, tmpvar_118))
   * 
    ((1.0/((1.0 + (tmpvar_117 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_118, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_119;
  tmpvar_119 = (tmpvar_4.xyz * lightColor_102);
  tmpvar_3.xyz = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  _glesFragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_19;
  tmpvar_19[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_19[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_19[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (normalize((tmpvar_18 * tmpvar_19)) * sqrt(dot (tmpvar_18, tmpvar_18)));
  FinalPosition_13 = tmpvar_20;
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_15 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_12.zxy) - (tmpvar_31.zxy * vRotatedWindVector_12.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_12, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_10 = vDirection_25;
    FinalPosition_13 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  FinalPosition_13 = tmpvar_64;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_11 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_13 = vPos_65;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_13;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_13 = vPos_89;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_6 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_101;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_102;
  highp vec3 viewN_103;
  highp vec3 viewpos_104;
  viewpos_104 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_105[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_105[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_103 = normalize((tmpvar_105 * tmpvar_10));
  lowp vec3 tmpvar_106;
  tmpvar_106 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_102 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[0].xyz - (viewpos_104 * unity_LightPosition[0].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_102 = (lightColor_102 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_103, tmpvar_109))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_109, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[1].xyz - (viewpos_104 * unity_LightPosition[1].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_102 = (lightColor_102 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_103, tmpvar_112))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_112, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_113;
  tmpvar_113 = (unity_LightPosition[2].xyz - (viewpos_104 * unity_LightPosition[2].w));
  highp float tmpvar_114;
  tmpvar_114 = dot (tmpvar_113, tmpvar_113);
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_113 * inversesqrt(tmpvar_114));
  lightColor_102 = (lightColor_102 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_103, tmpvar_115))
   * 
    ((1.0/((1.0 + (tmpvar_114 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_115, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_116;
  tmpvar_116 = (unity_LightPosition[3].xyz - (viewpos_104 * unity_LightPosition[3].w));
  highp float tmpvar_117;
  tmpvar_117 = dot (tmpvar_116, tmpvar_116);
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_116 * inversesqrt(tmpvar_117));
  lightColor_102 = (lightColor_102 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_103, tmpvar_118))
   * 
    ((1.0/((1.0 + (tmpvar_117 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_118, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_119;
  tmpvar_119 = (tmpvar_4.xyz * lightColor_102);
  tmpvar_3.xyz = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = tmpvar_1;
  tmpvar_13.w = tmpvar_2;
  gl_FragData[0] = tmpvar_13;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_19;
  tmpvar_19[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_19[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_19[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = (normalize((tmpvar_18 * tmpvar_19)) * sqrt(dot (tmpvar_18, tmpvar_18)));
  FinalPosition_13 = tmpvar_20;
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_15 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (tmpvar_20 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_32 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_32 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_32 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_32 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_47.x * tmpvar_31.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_47.x * tmpvar_31.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_47.x * tmpvar_31.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_31.yzx * vRotatedWindVector_12.zxy) - (tmpvar_31.zxy * vRotatedWindVector_12.yzx));
      vAxis_39.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_12, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_39);
      vAxis_39 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_54;
      tmpvar_54 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_55;
        fTime_55 = (tmpvar_36.z + tmpvar_41);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_35)
       + 
        (tmpvar_54 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_60.x * tmpvar_52.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_60.x * tmpvar_52.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_60.x * tmpvar_52.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_49 * tmpvar_62);
      vDirection_25 = (tmpvar_63 * _glesNormal);
      vPos_24 = (normalize((tmpvar_63 * vPos_28)) * tmpvar_45);
    };
    tmpvar_10 = vDirection_25;
    FinalPosition_13 = vPos_24;
  };
  highp vec3 tmpvar_64;
  tmpvar_64 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  FinalPosition_13 = tmpvar_64;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = tmpvar_64;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = tmpvar_64;
      highp float fAdherenceScale_67;
      highp vec3 tmpvar_68;
      tmpvar_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_69;
      tmpvar_69 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (tmpvar_69 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((tmpvar_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_69 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((tmpvar_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        (mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_70.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (tmpvar_64 + ((tmpvar_68 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((tmpvar_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((
        ((tmpvar_78.x * tmpvar_78.y) * tmpvar_78.x)
       * tmpvar_78.y) * _ST_WindTurbulences.x));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_11 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp vec3 tmpvar_81;
      tmpvar_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_82;
      tmpvar_82 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_83;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (tmpvar_82 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((tmpvar_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      vPos_80 = (vPos_65 + ((tmpvar_81 * 
        (((mix (
          mix (tmpvar_88, fTarget_85, fAmount_84)
        , fTarget_85, fAmount_84) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_13 = vPos_65;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_13;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    vPos_89.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * (
      ((_ST_WindGlobal.y * (tmpvar_94.x + (tmpvar_94.y * tmpvar_94.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_90)));
    vPos_89 = (normalize(vPos_89) * fLength_91);
    FinalPosition_13 = vPos_89;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 tmpvar_96;
  tmpvar_96 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (tmpvar_96 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = tmpvar_96.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  tmpvar_6 = tmpvar_100;
  highp vec2 tmpvar_101;
  tmpvar_101 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_101;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_102;
  highp vec3 viewN_103;
  highp vec3 viewpos_104;
  viewpos_104 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_105[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_105[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_103 = normalize((tmpvar_105 * tmpvar_10));
  lowp vec3 tmpvar_106;
  tmpvar_106 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_102 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[0].xyz - (viewpos_104 * unity_LightPosition[0].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_102 = (lightColor_102 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_103, tmpvar_109))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_109, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[1].xyz - (viewpos_104 * unity_LightPosition[1].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_102 = (lightColor_102 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_103, tmpvar_112))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_112, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_113;
  tmpvar_113 = (unity_LightPosition[2].xyz - (viewpos_104 * unity_LightPosition[2].w));
  highp float tmpvar_114;
  tmpvar_114 = dot (tmpvar_113, tmpvar_113);
  highp vec3 tmpvar_115;
  tmpvar_115 = (tmpvar_113 * inversesqrt(tmpvar_114));
  lightColor_102 = (lightColor_102 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_103, tmpvar_115))
   * 
    ((1.0/((1.0 + (tmpvar_114 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_115, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_116;
  tmpvar_116 = (unity_LightPosition[3].xyz - (viewpos_104 * unity_LightPosition[3].w));
  highp float tmpvar_117;
  tmpvar_117 = dot (tmpvar_116, tmpvar_116);
  highp vec3 tmpvar_118;
  tmpvar_118 = (tmpvar_116 * inversesqrt(tmpvar_117));
  lightColor_102 = (lightColor_102 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_103, tmpvar_118))
   * 
    ((1.0/((1.0 + (tmpvar_117 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_118, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_119;
  tmpvar_119 = (tmpvar_4.xyz * lightColor_102);
  tmpvar_3.xyz = tmpvar_119;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = tmpvar_1;
  tmpvar_13.w = tmpvar_2;
  _glesFragData[0] = tmpvar_13;
}



#endif"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_16;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_16 = vPos_91;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_6 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_103;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_104;
  highp vec3 viewN_105;
  highp vec3 viewpos_106;
  viewpos_106 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_107;
  tmpvar_107[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_107[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_107[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_105 = normalize((tmpvar_107 * tmpvar_13));
  lowp vec3 tmpvar_108;
  tmpvar_108 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_104 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[0].xyz - (viewpos_106 * unity_LightPosition[0].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_104 = (lightColor_104 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_105, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (unity_LightPosition[1].xyz - (viewpos_106 * unity_LightPosition[1].w));
  highp float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_112);
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_112 * inversesqrt(tmpvar_113));
  lightColor_104 = (lightColor_104 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_105, tmpvar_114))
   * 
    ((1.0/((1.0 + (tmpvar_113 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_114, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_115;
  tmpvar_115 = (unity_LightPosition[2].xyz - (viewpos_106 * unity_LightPosition[2].w));
  highp float tmpvar_116;
  tmpvar_116 = dot (tmpvar_115, tmpvar_115);
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_115 * inversesqrt(tmpvar_116));
  lightColor_104 = (lightColor_104 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_105, tmpvar_117))
   * 
    ((1.0/((1.0 + (tmpvar_116 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_117, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_118;
  tmpvar_118 = (unity_LightPosition[3].xyz - (viewpos_106 * unity_LightPosition[3].w));
  highp float tmpvar_119;
  tmpvar_119 = dot (tmpvar_118, tmpvar_118);
  highp vec3 tmpvar_120;
  tmpvar_120 = (tmpvar_118 * inversesqrt(tmpvar_119));
  lightColor_104 = (lightColor_104 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_105, tmpvar_120))
   * 
    ((1.0/((1.0 + (tmpvar_119 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_120, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_121;
  tmpvar_121 = (tmpvar_4.xyz * lightColor_104);
  tmpvar_3.xyz = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  gl_FragData[0] = tmpvar_14;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
out lowp vec4 xlv_Input_color;
out mediump vec3 xlv_Input_interpolator1;
out mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp float cse_9;
  cse_9 = _Object2World[3].x;
  highp float cse_10;
  cse_10 = _Object2World[3].y;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((
    fract(((cse_9 + cse_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp mat3 tmpvar_21;
  tmpvar_21[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_21[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_21[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  highp vec3 tmpvar_22;
  tmpvar_22 = (normalize((tmpvar_20 * tmpvar_21)) * sqrt(dot (tmpvar_20, tmpvar_20)));
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_17 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_34 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_34 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_34 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_34 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_49.x * tmpvar_33.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_49.x * tmpvar_33.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_49.x * tmpvar_33.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_41);
      vAxis_41 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      highp float tmpvar_56;
      tmpvar_56 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_57;
        fTime_57 = (tmpvar_38.z + tmpvar_43);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_37)
       + 
        (tmpvar_56 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_62.x * tmpvar_54.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_62.x * tmpvar_54.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_62.x * tmpvar_54.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_51 * tmpvar_64);
      vDirection_27 = (tmpvar_65 * _glesNormal);
      vPos_26 = (normalize((tmpvar_65 * vPos_30)) * tmpvar_47);
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  highp vec3 tmpvar_66;
  tmpvar_66 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  FinalPosition_16 = tmpvar_66;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = tmpvar_66;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = tmpvar_66;
      highp float fAdherenceScale_69;
      highp vec3 tmpvar_70;
      tmpvar_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_71;
      tmpvar_71 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (tmpvar_71 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((tmpvar_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_71 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((tmpvar_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        (mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74) * _ST_WindBranchTwitch.x)
       * 
        (1.0 - _ST_WindVector.w)
      ) + (vOscillations_72.x * 
        (1.0 - _ST_WindBranchTwitch.x)
      )) * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (tmpvar_66 + ((tmpvar_70 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((tmpvar_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((
        ((tmpvar_80.x * tmpvar_80.y) * tmpvar_80.x)
       * tmpvar_80.y) * _ST_WindTurbulences.x));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp vec3 tmpvar_83;
      tmpvar_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      highp float tmpvar_84;
      tmpvar_84 = (_ST_WindBranch.x + (cse_9 + cse_10));
      highp vec4 vOscillations_85;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (tmpvar_84 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((tmpvar_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (tmpvar_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      vPos_82 = (vPos_67 + ((tmpvar_83 * 
        (((mix (
          mix (tmpvar_90, fTarget_87, fAmount_86)
        , fTarget_87, fAmount_86) * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)))
      ) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_16;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (cse_9 + _ST_WindGlobal.x);
    tmpvar_95.y = (cse_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    vPos_91.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * (
      ((_ST_WindGlobal.y * (tmpvar_96.x + (tmpvar_96.y * tmpvar_96.y))) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z))
     * fAdjust_92)));
    vPos_91 = (normalize(vPos_91) * fLength_93);
    FinalPosition_16 = vPos_91;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 tmpvar_98;
  tmpvar_98 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (tmpvar_98 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = tmpvar_98.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  tmpvar_6 = tmpvar_102;
  highp vec2 tmpvar_103;
  tmpvar_103 = (tmpvar_6.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6.xy = tmpvar_103;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_104;
  highp vec3 viewN_105;
  highp vec3 viewpos_106;
  viewpos_106 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_107;
  tmpvar_107[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_107[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_107[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_105 = normalize((tmpvar_107 * tmpvar_13));
  lowp vec3 tmpvar_108;
  tmpvar_108 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_104 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[0].xyz - (viewpos_106 * unity_LightPosition[0].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_104 = (lightColor_104 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_105, tmpvar_111))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (tmpvar_111, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_112;
  tmpvar_112 = (unity_LightPosition[1].xyz - (viewpos_106 * unity_LightPosition[1].w));
  highp float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_112);
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_112 * inversesqrt(tmpvar_113));
  lightColor_104 = (lightColor_104 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_105, tmpvar_114))
   * 
    ((1.0/((1.0 + (tmpvar_113 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (tmpvar_114, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_115;
  tmpvar_115 = (unity_LightPosition[2].xyz - (viewpos_106 * unity_LightPosition[2].w));
  highp float tmpvar_116;
  tmpvar_116 = dot (tmpvar_115, tmpvar_115);
  highp vec3 tmpvar_117;
  tmpvar_117 = (tmpvar_115 * inversesqrt(tmpvar_116));
  lightColor_104 = (lightColor_104 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_105, tmpvar_117))
   * 
    ((1.0/((1.0 + (tmpvar_116 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (tmpvar_117, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_118;
  tmpvar_118 = (unity_LightPosition[3].xyz - (viewpos_106 * unity_LightPosition[3].w));
  highp float tmpvar_119;
  tmpvar_119 = dot (tmpvar_118, tmpvar_118);
  highp vec3 tmpvar_120;
  tmpvar_120 = (tmpvar_118 * inversesqrt(tmpvar_119));
  lightColor_104 = (lightColor_104 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_105, tmpvar_120))
   * 
    ((1.0/((1.0 + (tmpvar_119 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (tmpvar_120, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  highp vec3 tmpvar_121;
  tmpvar_121 = (tmpvar_4.xyz * lightColor_104);
  tmpvar_3.xyz = tmpvar_121;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_myScreenPos = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 unity_LODFade;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _Color;
in lowp vec4 xlv_Input_color;
in mediump vec3 xlv_Input_interpolator1;
in mediump vec3 xlv_Input_myScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_myScreenPos.xy / xlv_Input_myScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  mediump float tmpvar_6;
  tmpvar_6 = fract(tmpvar_5.y);
  highp float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * 0.0625) + unity_LODFade.y);
  projUV_4.y = tmpvar_7;
  lowp float x_8;
  x_8 = (texture (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = (diffuseColor_3.w * _Color.w);
  tmpvar_2 = tmpvar_10;
  lowp float x_11;
  x_11 = (tmpvar_2 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_3.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  diffuseColor_3.xyz = clamp ((tmpvar_12 * (
    ((max (diffuseColor_3.x, max (diffuseColor_3.y, diffuseColor_3.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z))) * 0.5)
   + 0.5)), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  tmpvar_1 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.xyz = tmpvar_1;
  tmpvar_14.w = tmpvar_2;
  _glesFragData[0] = tmpvar_14;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FACING_LEAF" }
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 400
 Tags { "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 520606
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  tmpvar_3 = tmpvar_4;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_11;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_1;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_14;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.xyz = tmpvar_19;
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (c_16.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_15.xyz = tmpvar_20;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  tmpvar_3 = tmpvar_4;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_11;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_1;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_14;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.xyz = tmpvar_19;
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (c_16.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_15.xyz = tmpvar_20;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_12;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_1;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  highp vec4 tmpvar_18;
  highp vec4 cse_19;
  cse_19 = (_Object2World * _glesVertex);
  tmpvar_18 = (unity_World2Shadow[0] * cse_19);
  tmpvar_4 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_19.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_14;
  lowp float tmpvar_15;
  mediump float dist_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (float((dist_16 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_21.xyz = tmpvar_26;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_13;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_1;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  tmpvar_15 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = worldNormal_1;
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosZ0 - tmpvar_9.z);
  highp vec4 tmpvar_29;
  tmpvar_29 = (((tmpvar_26 * tmpvar_26) + (tmpvar_27 * tmpvar_27)) + (tmpvar_28 * tmpvar_28));
  highp vec4 tmpvar_30;
  tmpvar_30 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_26 * normal_25.x) + (tmpvar_27 * normal_25.y)) + (tmpvar_28 * normal_25.z))
   * 
    inversesqrt(tmpvar_29)
  )) * (1.0/((1.0 + 
    (tmpvar_29 * lightAttenSq_24)
  ))));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_15 + ((
    ((lightColor0_20 * tmpvar_30.x) + (lightColor1_21 * tmpvar_30.y))
   + 
    (lightColor2_22 * tmpvar_30.z)
  ) + (lightColor3_23 * tmpvar_30.w)));
  tmpvar_4 = tmpvar_31;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_14;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.xyz = tmpvar_19;
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (c_16.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_15.xyz = tmpvar_20;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_13;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_1;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  tmpvar_15 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = worldNormal_1;
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosZ0 - tmpvar_9.z);
  highp vec4 tmpvar_29;
  tmpvar_29 = (((tmpvar_26 * tmpvar_26) + (tmpvar_27 * tmpvar_27)) + (tmpvar_28 * tmpvar_28));
  highp vec4 tmpvar_30;
  tmpvar_30 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_26 * normal_25.x) + (tmpvar_27 * normal_25.y)) + (tmpvar_28 * normal_25.z))
   * 
    inversesqrt(tmpvar_29)
  )) * (1.0/((1.0 + 
    (tmpvar_29 * lightAttenSq_24)
  ))));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_15 + ((
    ((lightColor0_20 * tmpvar_30.x) + (lightColor1_21 * tmpvar_30.y))
   + 
    (lightColor2_22 * tmpvar_30.z)
  ) + (lightColor3_23 * tmpvar_30.w)));
  tmpvar_4 = tmpvar_31;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_13;
  lowp vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_14;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.xyz = tmpvar_19;
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (c_16.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_15.xyz = tmpvar_20;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_10;
  cse_10 = (_Object2World * _glesVertex);
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec3 tmpvar_16;
  mediump vec4 normal_17;
  normal_17 = tmpvar_15;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, normal_17);
  x1_19.y = dot (unity_SHAg, normal_17);
  x1_19.z = dot (unity_SHAb, normal_17);
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_17.xyzz * normal_17.yzzx);
  x2_18.x = dot (unity_SHBr, tmpvar_20);
  x2_18.y = dot (unity_SHBg, tmpvar_20);
  x2_18.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_16 = ((x2_18 + (unity_SHC.xyz * 
    ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y))
  )) + x1_19);
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = worldNormal_1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosX0 - cse_10.x);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosY0 - cse_10.y);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosZ0 - cse_10.z);
  highp vec4 tmpvar_30;
  tmpvar_30 = (((tmpvar_27 * tmpvar_27) + (tmpvar_28 * tmpvar_28)) + (tmpvar_29 * tmpvar_29));
  highp vec4 tmpvar_31;
  tmpvar_31 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_27 * normal_26.x) + (tmpvar_28 * normal_26.y)) + (tmpvar_29 * normal_26.z))
   * 
    inversesqrt(tmpvar_30)
  )) * (1.0/((1.0 + 
    (tmpvar_30 * lightAttenSq_25)
  ))));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_16 + ((
    ((lightColor0_21 * tmpvar_31.x) + (lightColor1_22 * tmpvar_31.y))
   + 
    (lightColor2_23 * tmpvar_31.z)
  ) + (lightColor3_24 * tmpvar_31.w)));
  tmpvar_4 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_World2Shadow[0] * cse_10);
  tmpvar_5 = tmpvar_33;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_10.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_14;
  lowp float tmpvar_15;
  mediump float dist_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (float((dist_16 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_21.xyz = tmpvar_26;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_12;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_1;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  highp vec4 tmpvar_18;
  highp vec4 cse_19;
  cse_19 = (_Object2World * _glesVertex);
  tmpvar_18 = (unity_World2Shadow[0] * cse_19);
  tmpvar_4 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_19.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_14;
  lowp float shadow_15;
  lowp float tmpvar_16;
  tmpvar_16 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_17;
  tmpvar_17 = (_LightShadowData.x + (tmpvar_16 * (1.0 - _LightShadowData.x)));
  shadow_15 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_18;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_9 * tmpvar_19) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_20.xyz = tmpvar_25;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_12;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_1;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  highp vec4 tmpvar_18;
  highp vec4 cse_19;
  cse_19 = (_Object2World * _glesVertex);
  tmpvar_18 = (unity_World2Shadow[0] * cse_19);
  tmpvar_4 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_19.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_14;
  lowp float shadow_15;
  mediump float tmpvar_16;
  tmpvar_16 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_15 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_21.xyz = tmpvar_26;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_10;
  cse_10 = (_Object2World * _glesVertex);
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec3 tmpvar_16;
  mediump vec4 normal_17;
  normal_17 = tmpvar_15;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, normal_17);
  x1_19.y = dot (unity_SHAg, normal_17);
  x1_19.z = dot (unity_SHAb, normal_17);
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_17.xyzz * normal_17.yzzx);
  x2_18.x = dot (unity_SHBr, tmpvar_20);
  x2_18.y = dot (unity_SHBg, tmpvar_20);
  x2_18.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_16 = ((x2_18 + (unity_SHC.xyz * 
    ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y))
  )) + x1_19);
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = worldNormal_1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosX0 - cse_10.x);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosY0 - cse_10.y);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosZ0 - cse_10.z);
  highp vec4 tmpvar_30;
  tmpvar_30 = (((tmpvar_27 * tmpvar_27) + (tmpvar_28 * tmpvar_28)) + (tmpvar_29 * tmpvar_29));
  highp vec4 tmpvar_31;
  tmpvar_31 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_27 * normal_26.x) + (tmpvar_28 * normal_26.y)) + (tmpvar_29 * normal_26.z))
   * 
    inversesqrt(tmpvar_30)
  )) * (1.0/((1.0 + 
    (tmpvar_30 * lightAttenSq_25)
  ))));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_16 + ((
    ((lightColor0_21 * tmpvar_31.x) + (lightColor1_22 * tmpvar_31.y))
   + 
    (lightColor2_23 * tmpvar_31.z)
  ) + (lightColor3_24 * tmpvar_31.w)));
  tmpvar_4 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_World2Shadow[0] * cse_10);
  tmpvar_5 = tmpvar_33;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_10.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_14;
  lowp float shadow_15;
  lowp float tmpvar_16;
  tmpvar_16 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_17;
  tmpvar_17 = (_LightShadowData.x + (tmpvar_16 * (1.0 - _LightShadowData.x)));
  shadow_15 = tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_18;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tmpvar_9 * tmpvar_19) * diff_22);
  c_21.xyz = tmpvar_24;
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_21.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_20.xyz = tmpvar_25;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_10;
  cse_10 = (_Object2World * _glesVertex);
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec3 tmpvar_16;
  mediump vec4 normal_17;
  normal_17 = tmpvar_15;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, normal_17);
  x1_19.y = dot (unity_SHAg, normal_17);
  x1_19.z = dot (unity_SHAb, normal_17);
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_17.xyzz * normal_17.yzzx);
  x2_18.x = dot (unity_SHBr, tmpvar_20);
  x2_18.y = dot (unity_SHBg, tmpvar_20);
  x2_18.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_16 = ((x2_18 + (unity_SHC.xyz * 
    ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y))
  )) + x1_19);
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = worldNormal_1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosX0 - cse_10.x);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosY0 - cse_10.y);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosZ0 - cse_10.z);
  highp vec4 tmpvar_30;
  tmpvar_30 = (((tmpvar_27 * tmpvar_27) + (tmpvar_28 * tmpvar_28)) + (tmpvar_29 * tmpvar_29));
  highp vec4 tmpvar_31;
  tmpvar_31 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_27 * normal_26.x) + (tmpvar_28 * normal_26.y)) + (tmpvar_29 * normal_26.z))
   * 
    inversesqrt(tmpvar_30)
  )) * (1.0/((1.0 + 
    (tmpvar_30 * lightAttenSq_25)
  ))));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_16 + ((
    ((lightColor0_21 * tmpvar_31.x) + (lightColor1_22 * tmpvar_31.y))
   + 
    (lightColor2_23 * tmpvar_31.z)
  ) + (lightColor3_24 * tmpvar_31.w)));
  tmpvar_4 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_World2Shadow[0] * cse_10);
  tmpvar_5 = tmpvar_33;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_10.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_14;
  lowp float shadow_15;
  mediump float tmpvar_16;
  tmpvar_16 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_15 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_21.xyz = tmpvar_26;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord2.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_3 = tmpvar_4;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_13;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_1;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = ((x2_16 + (unity_SHC.xyz * 
    ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
  )) + x1_17);
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord2.xy;
  tmpvar_6.xy = tmpvar_9;
  tmpvar_3 = tmpvar_4;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_13;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_1;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = ((x2_16 + (unity_SHC.xyz * 
    ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
  )) + x1_17);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec4 tmpvar_20;
  highp vec4 cse_21;
  cse_21 = (_Object2World * _glesVertex);
  tmpvar_20 = (unity_World2Shadow[0] * cse_21);
  tmpvar_4 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_21.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float tmpvar_17;
  mediump float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (float((dist_18 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_22) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  highp vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  highp vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * _glesNormal.x)
   + 
    (v_13.xyz * _glesNormal.y)
  ) + (v_14.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_15;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = worldNormal_1;
  mediump vec3 tmpvar_17;
  mediump vec4 normal_18;
  normal_18 = tmpvar_16;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, normal_18);
  x1_20.y = dot (unity_SHAg, normal_18);
  x1_20.z = dot (unity_SHAb, normal_18);
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normal_18.xyzz * normal_18.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_17 = ((x2_19 + (unity_SHC.xyz * 
    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
  )) + x1_20);
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = worldNormal_1;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_11.z);
  highp vec4 tmpvar_31;
  tmpvar_31 = (((tmpvar_28 * tmpvar_28) + (tmpvar_29 * tmpvar_29)) + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_32;
  tmpvar_32 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_28 * normal_27.x) + (tmpvar_29 * normal_27.y)) + (tmpvar_30 * normal_27.z))
   * 
    inversesqrt(tmpvar_31)
  )) * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_26)
  ))));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_17 + ((
    ((lightColor0_22 * tmpvar_32.x) + (lightColor1_23 * tmpvar_32.y))
   + 
    (lightColor2_24 * tmpvar_32.z)
  ) + (lightColor3_25 * tmpvar_32.w)));
  tmpvar_4 = tmpvar_33;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  highp vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  highp vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * _glesNormal.x)
   + 
    (v_13.xyz * _glesNormal.y)
  ) + (v_14.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_15;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = worldNormal_1;
  mediump vec3 tmpvar_17;
  mediump vec4 normal_18;
  normal_18 = tmpvar_16;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, normal_18);
  x1_20.y = dot (unity_SHAg, normal_18);
  x1_20.z = dot (unity_SHAb, normal_18);
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normal_18.xyzz * normal_18.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_17 = ((x2_19 + (unity_SHC.xyz * 
    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
  )) + x1_20);
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = worldNormal_1;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_11.z);
  highp vec4 tmpvar_31;
  tmpvar_31 = (((tmpvar_28 * tmpvar_28) + (tmpvar_29 * tmpvar_29)) + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_32;
  tmpvar_32 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_28 * normal_27.x) + (tmpvar_29 * normal_27.y)) + (tmpvar_30 * normal_27.z))
   * 
    inversesqrt(tmpvar_31)
  )) * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_26)
  ))));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_17 + ((
    ((lightColor0_22 * tmpvar_32.x) + (lightColor1_23 * tmpvar_32.y))
   + 
    (lightColor2_24 * tmpvar_32.z)
  ) + (lightColor3_25 * tmpvar_32.w)));
  tmpvar_4 = tmpvar_33;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 detailColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (diffuseColor_11.xyz, detailColor_10.xyz, detailColor_10.www);
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_12;
  cse_12 = (_Object2World * _glesVertex);
  highp vec4 v_13;
  v_13.x = _World2Object[0].x;
  v_13.y = _World2Object[1].x;
  v_13.z = _World2Object[2].x;
  v_13.w = _World2Object[3].x;
  highp vec4 v_14;
  v_14.x = _World2Object[0].y;
  v_14.y = _World2Object[1].y;
  v_14.z = _World2Object[2].y;
  v_14.w = _World2Object[3].y;
  highp vec4 v_15;
  v_15.x = _World2Object[0].z;
  v_15.y = _World2Object[1].z;
  v_15.z = _World2Object[2].z;
  v_15.w = _World2Object[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * _glesNormal.x)
   + 
    (v_14.xyz * _glesNormal.y)
  ) + (v_15.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_16;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = worldNormal_1;
  mediump vec3 tmpvar_18;
  mediump vec4 normal_19;
  normal_19 = tmpvar_17;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_18 = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = worldNormal_1;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - cse_12.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - cse_12.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - cse_12.z);
  highp vec4 tmpvar_32;
  tmpvar_32 = (((tmpvar_29 * tmpvar_29) + (tmpvar_30 * tmpvar_30)) + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_33;
  tmpvar_33 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_29 * normal_28.x) + (tmpvar_30 * normal_28.y)) + (tmpvar_31 * normal_28.z))
   * 
    inversesqrt(tmpvar_32)
  )) * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_27)
  ))));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_18 + ((
    ((lightColor0_23 * tmpvar_33.x) + (lightColor1_24 * tmpvar_33.y))
   + 
    (lightColor2_25 * tmpvar_33.z)
  ) + (lightColor3_26 * tmpvar_33.w)));
  tmpvar_4 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_World2Shadow[0] * cse_12);
  tmpvar_5 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_12.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float tmpvar_17;
  mediump float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (float((dist_18 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_22) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec4 tmpvar_20;
  highp vec4 cse_21;
  cse_21 = (_Object2World * _glesVertex);
  tmpvar_20 = (unity_World2Shadow[0] * cse_21);
  tmpvar_4 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_21.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_21) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (c_23.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = _glesMultiTexCoord2.xy;
  tmpvar_7.xy = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec4 tmpvar_20;
  highp vec4 cse_21;
  cse_21 = (_Object2World * _glesVertex);
  tmpvar_20 = (unity_World2Shadow[0] * cse_21);
  tmpvar_4 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_21.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  mediump float tmpvar_18;
  tmpvar_18 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_22) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_12;
  cse_12 = (_Object2World * _glesVertex);
  highp vec4 v_13;
  v_13.x = _World2Object[0].x;
  v_13.y = _World2Object[1].x;
  v_13.z = _World2Object[2].x;
  v_13.w = _World2Object[3].x;
  highp vec4 v_14;
  v_14.x = _World2Object[0].y;
  v_14.y = _World2Object[1].y;
  v_14.z = _World2Object[2].y;
  v_14.w = _World2Object[3].y;
  highp vec4 v_15;
  v_15.x = _World2Object[0].z;
  v_15.y = _World2Object[1].z;
  v_15.z = _World2Object[2].z;
  v_15.w = _World2Object[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * _glesNormal.x)
   + 
    (v_14.xyz * _glesNormal.y)
  ) + (v_15.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_16;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = worldNormal_1;
  mediump vec3 tmpvar_18;
  mediump vec4 normal_19;
  normal_19 = tmpvar_17;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_18 = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = worldNormal_1;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - cse_12.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - cse_12.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - cse_12.z);
  highp vec4 tmpvar_32;
  tmpvar_32 = (((tmpvar_29 * tmpvar_29) + (tmpvar_30 * tmpvar_30)) + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_33;
  tmpvar_33 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_29 * normal_28.x) + (tmpvar_30 * normal_28.y)) + (tmpvar_31 * normal_28.z))
   * 
    inversesqrt(tmpvar_32)
  )) * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_27)
  ))));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_18 + ((
    ((lightColor0_23 * tmpvar_33.x) + (lightColor1_24 * tmpvar_33.y))
   + 
    (lightColor2_25 * tmpvar_33.z)
  ) + (lightColor3_26 * tmpvar_33.w)));
  tmpvar_4 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_World2Shadow[0] * cse_12);
  tmpvar_5 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_12.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_21) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (c_23.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_DETAIL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = _glesMultiTexCoord2.xy;
  tmpvar_8.xy = tmpvar_11;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_12;
  cse_12 = (_Object2World * _glesVertex);
  highp vec4 v_13;
  v_13.x = _World2Object[0].x;
  v_13.y = _World2Object[1].x;
  v_13.z = _World2Object[2].x;
  v_13.w = _World2Object[3].x;
  highp vec4 v_14;
  v_14.x = _World2Object[0].y;
  v_14.y = _World2Object[1].y;
  v_14.z = _World2Object[2].y;
  v_14.w = _World2Object[3].y;
  highp vec4 v_15;
  v_15.x = _World2Object[0].z;
  v_15.y = _World2Object[1].z;
  v_15.z = _World2Object[2].z;
  v_15.w = _World2Object[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * _glesNormal.x)
   + 
    (v_14.xyz * _glesNormal.y)
  ) + (v_15.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_16;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = worldNormal_1;
  mediump vec3 tmpvar_18;
  mediump vec4 normal_19;
  normal_19 = tmpvar_17;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_18 = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = worldNormal_1;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - cse_12.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - cse_12.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - cse_12.z);
  highp vec4 tmpvar_32;
  tmpvar_32 = (((tmpvar_29 * tmpvar_29) + (tmpvar_30 * tmpvar_30)) + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_33;
  tmpvar_33 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_29 * normal_28.x) + (tmpvar_30 * normal_28.y)) + (tmpvar_31 * normal_28.z))
   * 
    inversesqrt(tmpvar_32)
  )) * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_27)
  ))));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_18 + ((
    ((lightColor0_23 * tmpvar_33.x) + (lightColor1_24 * tmpvar_33.y))
   + 
    (lightColor2_25 * tmpvar_33.z)
  ) + (lightColor3_26 * tmpvar_33.w)));
  tmpvar_4 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_World2Shadow[0] * cse_12);
  tmpvar_5 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_12.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 detailColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_DetailTex, xlv_TEXCOORD4.xy);
  detailColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (diffuseColor_12.xyz, detailColor_11.xyz, detailColor_11.www);
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  mediump float tmpvar_18;
  tmpvar_18 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_22) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_6 = tmpvar_9;
  tmpvar_3 = tmpvar_4;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_13;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_1;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = ((x2_16 + (unity_SHC.xyz * 
    ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
  )) + x1_17);
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_7;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_6 = tmpvar_9;
  tmpvar_3 = tmpvar_4;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_13;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_1;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = ((x2_16 + (unity_SHC.xyz * 
    ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
  )) + x1_17);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec4 tmpvar_20;
  highp vec4 cse_21;
  cse_21 = (_Object2World * _glesVertex);
  tmpvar_20 = (unity_World2Shadow[0] * cse_21);
  tmpvar_4 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_21.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float tmpvar_17;
  mediump float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (float((dist_18 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_22) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  highp vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  highp vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * _glesNormal.x)
   + 
    (v_13.xyz * _glesNormal.y)
  ) + (v_14.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_15;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = worldNormal_1;
  mediump vec3 tmpvar_17;
  mediump vec4 normal_18;
  normal_18 = tmpvar_16;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, normal_18);
  x1_20.y = dot (unity_SHAg, normal_18);
  x1_20.z = dot (unity_SHAb, normal_18);
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normal_18.xyzz * normal_18.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_17 = ((x2_19 + (unity_SHC.xyz * 
    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
  )) + x1_20);
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = worldNormal_1;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_11.z);
  highp vec4 tmpvar_31;
  tmpvar_31 = (((tmpvar_28 * tmpvar_28) + (tmpvar_29 * tmpvar_29)) + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_32;
  tmpvar_32 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_28 * normal_27.x) + (tmpvar_29 * normal_27.y)) + (tmpvar_30 * normal_27.z))
   * 
    inversesqrt(tmpvar_31)
  )) * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_26)
  ))));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_17 + ((
    ((lightColor0_22 * tmpvar_32.x) + (lightColor1_23 * tmpvar_32.y))
   + 
    (lightColor2_24 * tmpvar_32.z)
  ) + (lightColor3_25 * tmpvar_32.w)));
  tmpvar_4 = tmpvar_33;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  highp vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  highp vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * _glesNormal.x)
   + 
    (v_13.xyz * _glesNormal.y)
  ) + (v_14.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_15;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = worldNormal_1;
  mediump vec3 tmpvar_17;
  mediump vec4 normal_18;
  normal_18 = tmpvar_16;
  mediump vec3 x2_19;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, normal_18);
  x1_20.y = dot (unity_SHAg, normal_18);
  x1_20.z = dot (unity_SHAb, normal_18);
  mediump vec4 tmpvar_21;
  tmpvar_21 = (normal_18.xyzz * normal_18.yzzx);
  x2_19.x = dot (unity_SHBr, tmpvar_21);
  x2_19.y = dot (unity_SHBg, tmpvar_21);
  x2_19.z = dot (unity_SHBb, tmpvar_21);
  tmpvar_17 = ((x2_19 + (unity_SHC.xyz * 
    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
  )) + x1_20);
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = worldNormal_1;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_11.z);
  highp vec4 tmpvar_31;
  tmpvar_31 = (((tmpvar_28 * tmpvar_28) + (tmpvar_29 * tmpvar_29)) + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_32;
  tmpvar_32 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_28 * normal_27.x) + (tmpvar_29 * normal_27.y)) + (tmpvar_30 * normal_27.z))
   * 
    inversesqrt(tmpvar_31)
  )) * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_26)
  ))));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_17 + ((
    ((lightColor0_22 * tmpvar_32.x) + (lightColor1_23 * tmpvar_32.y))
   + 
    (lightColor2_24 * tmpvar_32.z)
  ) + (lightColor3_25 * tmpvar_32.w)));
  tmpvar_4 = tmpvar_33;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_14;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_16;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.xyz = tmpvar_21;
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_17.xyz = tmpvar_22;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_11;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_12;
  cse_12 = (_Object2World * _glesVertex);
  highp vec4 v_13;
  v_13.x = _World2Object[0].x;
  v_13.y = _World2Object[1].x;
  v_13.z = _World2Object[2].x;
  v_13.w = _World2Object[3].x;
  highp vec4 v_14;
  v_14.x = _World2Object[0].y;
  v_14.y = _World2Object[1].y;
  v_14.z = _World2Object[2].y;
  v_14.w = _World2Object[3].y;
  highp vec4 v_15;
  v_15.x = _World2Object[0].z;
  v_15.y = _World2Object[1].z;
  v_15.z = _World2Object[2].z;
  v_15.w = _World2Object[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * _glesNormal.x)
   + 
    (v_14.xyz * _glesNormal.y)
  ) + (v_15.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_16;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = worldNormal_1;
  mediump vec3 tmpvar_18;
  mediump vec4 normal_19;
  normal_19 = tmpvar_17;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_18 = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = worldNormal_1;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - cse_12.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - cse_12.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - cse_12.z);
  highp vec4 tmpvar_32;
  tmpvar_32 = (((tmpvar_29 * tmpvar_29) + (tmpvar_30 * tmpvar_30)) + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_33;
  tmpvar_33 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_29 * normal_28.x) + (tmpvar_30 * normal_28.y)) + (tmpvar_31 * normal_28.z))
   * 
    inversesqrt(tmpvar_32)
  )) * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_27)
  ))));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_18 + ((
    ((lightColor0_23 * tmpvar_33.x) + (lightColor1_24 * tmpvar_33.y))
   + 
    (lightColor2_25 * tmpvar_33.z)
  ) + (lightColor3_26 * tmpvar_33.w)));
  tmpvar_4 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_World2Shadow[0] * cse_12);
  tmpvar_5 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_12.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float tmpvar_17;
  mediump float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (float((dist_18 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_22) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec4 tmpvar_20;
  highp vec4 cse_21;
  cse_21 = (_Object2World * _glesVertex);
  tmpvar_20 = (unity_World2Shadow[0] * cse_21);
  tmpvar_4 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_21.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_21) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (c_23.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_8;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_10;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec4 tmpvar_20;
  highp vec4 cse_21;
  cse_21 = (_Object2World * _glesVertex);
  tmpvar_20 = (unity_World2Shadow[0] * cse_21);
  tmpvar_4 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_21.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  xlv_TEXCOORD6 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  mediump float tmpvar_18;
  tmpvar_18 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_22) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_11;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_12;
  cse_12 = (_Object2World * _glesVertex);
  highp vec4 v_13;
  v_13.x = _World2Object[0].x;
  v_13.y = _World2Object[1].x;
  v_13.z = _World2Object[2].x;
  v_13.w = _World2Object[3].x;
  highp vec4 v_14;
  v_14.x = _World2Object[0].y;
  v_14.y = _World2Object[1].y;
  v_14.z = _World2Object[2].y;
  v_14.w = _World2Object[3].y;
  highp vec4 v_15;
  v_15.x = _World2Object[0].z;
  v_15.y = _World2Object[1].z;
  v_15.z = _World2Object[2].z;
  v_15.w = _World2Object[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * _glesNormal.x)
   + 
    (v_14.xyz * _glesNormal.y)
  ) + (v_15.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_16;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = worldNormal_1;
  mediump vec3 tmpvar_18;
  mediump vec4 normal_19;
  normal_19 = tmpvar_17;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_18 = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = worldNormal_1;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - cse_12.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - cse_12.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - cse_12.z);
  highp vec4 tmpvar_32;
  tmpvar_32 = (((tmpvar_29 * tmpvar_29) + (tmpvar_30 * tmpvar_30)) + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_33;
  tmpvar_33 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_29 * normal_28.x) + (tmpvar_30 * normal_28.y)) + (tmpvar_31 * normal_28.z))
   * 
    inversesqrt(tmpvar_32)
  )) * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_27)
  ))));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_18 + ((
    ((lightColor0_23 * tmpvar_33.x) + (lightColor1_24 * tmpvar_33.y))
   + 
    (lightColor2_25 * tmpvar_33.z)
  ) + (lightColor3_26 * tmpvar_33.w)));
  tmpvar_4 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_World2Shadow[0] * cse_12);
  tmpvar_5 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_12.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_21) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (c_23.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
in vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out mediump vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_9;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_11;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_12;
  cse_12 = (_Object2World * _glesVertex);
  highp vec4 v_13;
  v_13.x = _World2Object[0].x;
  v_13.y = _World2Object[1].x;
  v_13.z = _World2Object[2].x;
  v_13.w = _World2Object[3].x;
  highp vec4 v_14;
  v_14.x = _World2Object[0].y;
  v_14.y = _World2Object[1].y;
  v_14.z = _World2Object[2].y;
  v_14.w = _World2Object[3].y;
  highp vec4 v_15;
  v_15.x = _World2Object[0].z;
  v_15.y = _World2Object[1].z;
  v_15.z = _World2Object[2].z;
  v_15.w = _World2Object[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(((
    (v_13.xyz * _glesNormal.x)
   + 
    (v_14.xyz * _glesNormal.y)
  ) + (v_15.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_16;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = worldNormal_1;
  mediump vec3 tmpvar_18;
  mediump vec4 normal_19;
  normal_19 = tmpvar_17;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_18 = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 normal_28;
  normal_28 = worldNormal_1;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - cse_12.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - cse_12.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - cse_12.z);
  highp vec4 tmpvar_32;
  tmpvar_32 = (((tmpvar_29 * tmpvar_29) + (tmpvar_30 * tmpvar_30)) + (tmpvar_31 * tmpvar_31));
  highp vec4 tmpvar_33;
  tmpvar_33 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_29 * normal_28.x) + (tmpvar_30 * normal_28.y)) + (tmpvar_31 * normal_28.z))
   * 
    inversesqrt(tmpvar_32)
  )) * (1.0/((1.0 + 
    (tmpvar_32 * lightAttenSq_27)
  ))));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_18 + ((
    ((lightColor0_23 * tmpvar_33.x) + (lightColor1_24 * tmpvar_33.y))
   + 
    (lightColor2_25 * tmpvar_33.z)
  ) + (lightColor3_26 * tmpvar_33.w)));
  tmpvar_4 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_World2Shadow[0] * cse_12);
  tmpvar_5 = tmpvar_35;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_12.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_15;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_16;
  lowp float shadow_17;
  mediump float tmpvar_18;
  tmpvar_18 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_21;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_9 * tmpvar_22) * diff_25);
  c_24.xyz = tmpvar_27;
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_24.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_23.xyz = tmpvar_28;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  tmpvar_3 = tmpvar_4;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_11;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_1;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.xyz = tmpvar_20;
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (c_17.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_16.xyz = tmpvar_21;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord0.xy;
  tmpvar_5.xy = tmpvar_6;
  tmpvar_4.w = _Color.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * _glesColor.x);
  tmpvar_4.xyz = tmpvar_7;
  tmpvar_3 = tmpvar_4;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_11;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_1;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.xyz = tmpvar_20;
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (c_17.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_16.xyz = tmpvar_21;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_12;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_1;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  highp vec4 tmpvar_18;
  highp vec4 cse_19;
  cse_19 = (_Object2World * _glesVertex);
  tmpvar_18 = (unity_World2Shadow[0] * cse_19);
  tmpvar_4 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_19.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float dist_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (float((dist_17 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_21) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (c_23.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_13;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_1;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  tmpvar_15 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = worldNormal_1;
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosZ0 - tmpvar_9.z);
  highp vec4 tmpvar_29;
  tmpvar_29 = (((tmpvar_26 * tmpvar_26) + (tmpvar_27 * tmpvar_27)) + (tmpvar_28 * tmpvar_28));
  highp vec4 tmpvar_30;
  tmpvar_30 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_26 * normal_25.x) + (tmpvar_27 * normal_25.y)) + (tmpvar_28 * normal_25.z))
   * 
    inversesqrt(tmpvar_29)
  )) * (1.0/((1.0 + 
    (tmpvar_29 * lightAttenSq_24)
  ))));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_15 + ((
    ((lightColor0_20 * tmpvar_30.x) + (lightColor1_21 * tmpvar_30.y))
   + 
    (lightColor2_22 * tmpvar_30.z)
  ) + (lightColor3_23 * tmpvar_30.w)));
  tmpvar_4 = tmpvar_31;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.xyz = tmpvar_20;
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (c_17.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_16.xyz = tmpvar_21;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_13;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_1;
  mediump vec3 tmpvar_15;
  mediump vec4 normal_16;
  normal_16 = tmpvar_14;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  tmpvar_15 = ((x2_17 + (unity_SHC.xyz * 
    ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y))
  )) + x1_18);
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = worldNormal_1;
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosZ0 - tmpvar_9.z);
  highp vec4 tmpvar_29;
  tmpvar_29 = (((tmpvar_26 * tmpvar_26) + (tmpvar_27 * tmpvar_27)) + (tmpvar_28 * tmpvar_28));
  highp vec4 tmpvar_30;
  tmpvar_30 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_26 * normal_25.x) + (tmpvar_27 * normal_25.y)) + (tmpvar_28 * normal_25.z))
   * 
    inversesqrt(tmpvar_29)
  )) * (1.0/((1.0 + 
    (tmpvar_29 * lightAttenSq_24)
  ))));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_15 + ((
    ((lightColor0_20 * tmpvar_30.x) + (lightColor1_21 * tmpvar_30.y))
   + 
    (lightColor2_22 * tmpvar_30.z)
  ) + (lightColor3_23 * tmpvar_30.w)));
  tmpvar_4 = tmpvar_31;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = (diffuseColor_10.w * _Color.w);
  tmpvar_9 = tmpvar_12;
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_8 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_1 = tmpvar_15;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.xyz = tmpvar_20;
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (c_17.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_16.xyz = tmpvar_21;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  _glesFragData[0] = c_3;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = _glesMultiTexCoord0.xy;
  tmpvar_7.xy = tmpvar_8;
  tmpvar_6.w = _Color.w;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (_Color.xyz * _glesColor.x);
  tmpvar_6.xyz = tmpvar_9;
  tmpvar_3 = tmpvar_6;
  highp vec4 cse_10;
  cse_10 = (_Object2World * _glesVertex);
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_14;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_1;
  mediump vec3 tmpvar_16;
  mediump vec4 normal_17;
  normal_17 = tmpvar_15;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, normal_17);
  x1_19.y = dot (unity_SHAg, normal_17);
  x1_19.z = dot (unity_SHAb, normal_17);
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_17.xyzz * normal_17.yzzx);
  x2_18.x = dot (unity_SHBr, tmpvar_20);
  x2_18.y = dot (unity_SHBg, tmpvar_20);
  x2_18.z = dot (unity_SHBb, tmpvar_20);
  tmpvar_16 = ((x2_18 + (unity_SHC.xyz * 
    ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y))
  )) + x1_19);
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = worldNormal_1;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosX0 - cse_10.x);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosY0 - cse_10.y);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosZ0 - cse_10.z);
  highp vec4 tmpvar_30;
  tmpvar_30 = (((tmpvar_27 * tmpvar_27) + (tmpvar_28 * tmpvar_28)) + (tmpvar_29 * tmpvar_29));
  highp vec4 tmpvar_31;
  tmpvar_31 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_27 * normal_26.x) + (tmpvar_28 * normal_26.y)) + (tmpvar_29 * normal_26.z))
   * 
    inversesqrt(tmpvar_30)
  )) * (1.0/((1.0 + 
    (tmpvar_30 * lightAttenSq_25)
  ))));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_16 + ((
    ((lightColor0_21 * tmpvar_31.x) + (lightColor1_22 * tmpvar_31.y))
   + 
    (lightColor2_23 * tmpvar_31.z)
  ) + (lightColor3_24 * tmpvar_31.w)));
  tmpvar_4 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_World2Shadow[0] * cse_10);
  tmpvar_5 = tmpvar_33;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_10.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float dist_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (float((dist_17 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_21) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (c_23.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_12;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_1;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  highp vec4 tmpvar_18;
  highp vec4 cse_19;
  cse_19 = (_Object2World * _glesVertex);
  tmpvar_18 = (unity_World2Shadow[0] * cse_19);
  tmpvar_4 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_19.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  mediump float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_19;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.xyz = tmpvar_25;
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_21.xyz = tmpvar_26;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
out mediump vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out mediump vec3 xlv_TEXCOORD4;
out mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord0.xy;
  tmpvar_6.xy = tmpvar_7;
  tmpvar_5.w = _Color.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * _glesColor.x);
  tmpvar_5.xyz = tmpvar_8;
  tmpvar_3 = tmpvar_5;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_12;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_1;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  highp vec4 tmpvar_18;
  highp vec4 cse_19;
  cse_19 = (_Object2World * _glesVertex);
  tmpvar_18 = (unity_World2Shadow[0] * cse_19);
  tmpvar_4 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = cse_19.xyz;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
  xlv_TEXCOORD5 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
in mediump vec3 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in mediump vec3 xlv_TEXCOORD4;
in mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = (diffuseColor_11.w * _Color.w);
  tmpvar_10 = tmpvar_13;
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  tmpvar_9 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  mediump float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = _LightColor0.xyz;
  tmpvar_2 = tmpvar_20;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tmpvar_9 * tmpvar_21) * diff_24);
  c_23.xyz = tmpvar_26;
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (c_23.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_22.xyz = tmpvar_27;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  _glesFragData[0] = c_4;
}



#endif"
}
SubProgram "gles " {
Keywo